<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [GD Blink\GD Blink.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image GD Blink\GD Blink.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Wed Jan 25 15:34:01 2023
<BR><P>
<H3>Maximum Stack Usage =       1252 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; serial_process &rArr; command_process &rArr; command_arc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[11f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[74]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[74]">BusFault_Handler</a><BR>
 <LI><a href="#[72]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[72]">HardFault_Handler</a><BR>
 <LI><a href="#[73]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">MemManage_Handler</a><BR>
 <LI><a href="#[71]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">NMI_Handler</a><BR>
 <LI><a href="#[75]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[75]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8c]">ADC1_2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a9]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[bf]">ADC_DMAConvCplt</a> from stm32f1xx_hal_adc.o(.text.ADC_DMAConvCplt) referenced 2 times from stm32f1xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
 <LI><a href="#[c1]">ADC_DMAError</a> from stm32f1xx_hal_adc.o(.text.ADC_DMAError) referenced 2 times from stm32f1xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
 <LI><a href="#[c0]">ADC_DMAHalfConvCplt</a> from stm32f1xx_hal_adc.o(.text.ADC_DMAHalfConvCplt) referenced 2 times from stm32f1xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
 <LI><a href="#[37]">A_FTrans</a> from tasklist.o(.text.A_FTrans) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[32]">A_KM2_on</a> from tasklist.o(.text.A_KM2_on) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[35]">A_KM3_off</a> from tasklist.o(.text.A_KM3_off) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[24]">A_KM4_off</a> from tasklist.o(.text.A_KM4_off) referenced 10 times from tasklist.o(.data.Tasks)
 <LI><a href="#[31]">A_KM4_on</a> from tasklist.o(.text.A_KM4_on) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[25]">A_KM5_off</a> from tasklist.o(.text.A_KM5_off) referenced 8 times from tasklist.o(.data.Tasks)
 <LI><a href="#[30]">A_KM5_on</a> from tasklist.o(.text.A_KM5_on) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[26]">A_KM6_off</a> from tasklist.o(.text.A_KM6_off) referenced 6 times from tasklist.o(.data.Tasks)
 <LI><a href="#[2f]">A_KM6_on</a> from tasklist.o(.text.A_KM6_on) referenced 6 times from tasklist.o(.data.Tasks)
 <LI><a href="#[27]">A_KM7_off</a> from tasklist.o(.text.A_KM7_off) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[2d]">A_KM7_on</a> from tasklist.o(.text.A_KM7_on) referenced 8 times from tasklist.o(.data.Tasks)
 <LI><a href="#[28]">A_KM8_off</a> from tasklist.o(.text.A_KM8_off) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[2e]">A_KM8_on</a> from tasklist.o(.text.A_KM8_on) referenced 8 times from tasklist.o(.data.Tasks)
 <LI><a href="#[2b]">A_KM9_check</a> from tasklist.o(.text.A_KM9_check) referenced 10 times from tasklist.o(.data.Tasks)
 <LI><a href="#[29]">A_KM9_off</a> from tasklist.o(.text.A_KM9_off) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[36]">A_KM_Trans_off</a> from tasklist.o(.text.A_KM_Trans_off) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[33]">A_KM_Trans_on</a> from tasklist.o(.text.A_KM_Trans_on) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[2c]">A_TransOff</a> from tasklist.o(.text.A_TransOff) referenced 10 times from tasklist.o(.data.Tasks)
 <LI><a href="#[23]">A_TransOn</a> from tasklist.o(.text.A_TransOn) referenced 12 times from tasklist.o(.data.Tasks)
 <LI><a href="#[22]">A_begin</a> from tasklist.o(.text.A_begin) referenced 12 times from tasklist.o(.data.Tasks)
 <LI><a href="#[34]">A_delay_5sec</a> from tasklist.o(.text.A_delay_5sec) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[2a]">A_finish</a> from tasklist.o(.text.A_finish) referenced 12 times from tasklist.o(.data.Tasks)
 <LI><a href="#[68]">A_rep_end</a> from tasklist.o(.text.A_rep_end) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[67]">A_rep_start</a> from tasklist.o(.text.A_rep_start) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[6e]">AdePower</a> from tasklist.o(.text.AdePower) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[6d]">AdeRms</a> from tasklist.o(.text.AdeRms) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[4d]">B_FTrans</a> from tasklist.o(.text.B_FTrans) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[48]">B_KM2_on</a> from tasklist.o(.text.B_KM2_on) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[4b]">B_KM3_off</a> from tasklist.o(.text.B_KM3_off) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[3a]">B_KM4_off</a> from tasklist.o(.text.B_KM4_off) referenced 10 times from tasklist.o(.data.Tasks)
 <LI><a href="#[47]">B_KM4_on</a> from tasklist.o(.text.B_KM4_on) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[3b]">B_KM5_off</a> from tasklist.o(.text.B_KM5_off) referenced 8 times from tasklist.o(.data.Tasks)
 <LI><a href="#[46]">B_KM5_on</a> from tasklist.o(.text.B_KM5_on) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[3c]">B_KM6_off</a> from tasklist.o(.text.B_KM6_off) referenced 6 times from tasklist.o(.data.Tasks)
 <LI><a href="#[45]">B_KM6_on</a> from tasklist.o(.text.B_KM6_on) referenced 6 times from tasklist.o(.data.Tasks)
 <LI><a href="#[3d]">B_KM7_off</a> from tasklist.o(.text.B_KM7_off) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[43]">B_KM7_on</a> from tasklist.o(.text.B_KM7_on) referenced 8 times from tasklist.o(.data.Tasks)
 <LI><a href="#[3e]">B_KM8_off</a> from tasklist.o(.text.B_KM8_off) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[44]">B_KM8_on</a> from tasklist.o(.text.B_KM8_on) referenced 8 times from tasklist.o(.data.Tasks)
 <LI><a href="#[41]">B_KM9_check</a> from tasklist.o(.text.B_KM9_check) referenced 10 times from tasklist.o(.data.Tasks)
 <LI><a href="#[3f]">B_KM9_off</a> from tasklist.o(.text.B_KM9_off) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[4c]">B_KM_Trans_off</a> from tasklist.o(.text.B_KM_Trans_off) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[49]">B_KM_Trans_on</a> from tasklist.o(.text.B_KM_Trans_on) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[42]">B_TransOff</a> from tasklist.o(.text.B_TransOff) referenced 10 times from tasklist.o(.data.Tasks)
 <LI><a href="#[39]">B_TransOn</a> from tasklist.o(.text.B_TransOn) referenced 12 times from tasklist.o(.data.Tasks)
 <LI><a href="#[38]">B_begin</a> from tasklist.o(.text.B_begin) referenced 12 times from tasklist.o(.data.Tasks)
 <LI><a href="#[4a]">B_delay_5sec</a> from tasklist.o(.text.B_delay_5sec) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[40]">B_finish</a> from tasklist.o(.text.B_finish) referenced 12 times from tasklist.o(.data.Tasks)
 <LI><a href="#[6a]">B_rep_end</a> from tasklist.o(.text.B_rep_end) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[69]">B_rep_start</a> from tasklist.o(.text.B_rep_start) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[74]">BusFault_Handler</a> from stm32f1xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[90]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[63]">C_FTrans</a> from tasklist.o(.text.C_FTrans) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[5e]">C_KM2_on</a> from tasklist.o(.text.C_KM2_on) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[61]">C_KM3_off</a> from tasklist.o(.text.C_KM3_off) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[50]">C_KM4_off</a> from tasklist.o(.text.C_KM4_off) referenced 10 times from tasklist.o(.data.Tasks)
 <LI><a href="#[5d]">C_KM4_on</a> from tasklist.o(.text.C_KM4_on) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[51]">C_KM5_off</a> from tasklist.o(.text.C_KM5_off) referenced 8 times from tasklist.o(.data.Tasks)
 <LI><a href="#[5c]">C_KM5_on</a> from tasklist.o(.text.C_KM5_on) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[52]">C_KM6_off</a> from tasklist.o(.text.C_KM6_off) referenced 6 times from tasklist.o(.data.Tasks)
 <LI><a href="#[5b]">C_KM6_on</a> from tasklist.o(.text.C_KM6_on) referenced 6 times from tasklist.o(.data.Tasks)
 <LI><a href="#[53]">C_KM7_off</a> from tasklist.o(.text.C_KM7_off) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[59]">C_KM7_on</a> from tasklist.o(.text.C_KM7_on) referenced 8 times from tasklist.o(.data.Tasks)
 <LI><a href="#[54]">C_KM8_off</a> from tasklist.o(.text.C_KM8_off) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[5a]">C_KM8_on</a> from tasklist.o(.text.C_KM8_on) referenced 8 times from tasklist.o(.data.Tasks)
 <LI><a href="#[57]">C_KM9_check</a> from tasklist.o(.text.C_KM9_check) referenced 10 times from tasklist.o(.data.Tasks)
 <LI><a href="#[55]">C_KM9_off</a> from tasklist.o(.text.C_KM9_off) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[62]">C_KM_Trans_off</a> from tasklist.o(.text.C_KM_Trans_off) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[5f]">C_KM_Trans_on</a> from tasklist.o(.text.C_KM_Trans_on) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[58]">C_TransOff</a> from tasklist.o(.text.C_TransOff) referenced 10 times from tasklist.o(.data.Tasks)
 <LI><a href="#[4f]">C_TransOn</a> from tasklist.o(.text.C_TransOn) referenced 12 times from tasklist.o(.data.Tasks)
 <LI><a href="#[4e]">C_begin</a> from tasklist.o(.text.C_begin) referenced 12 times from tasklist.o(.data.Tasks)
 <LI><a href="#[60]">C_delay_5sec</a> from tasklist.o(.text.C_delay_5sec) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[56]">C_finish</a> from tasklist.o(.text.C_finish) referenced 12 times from tasklist.o(.data.Tasks)
 <LI><a href="#[6c]">C_rep_end</a> from tasklist.o(.text.C_rep_end) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[6b]">C_rep_start</a> from tasklist.o(.text.C_rep_start) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[85]">DMA1_Channel1_IRQHandler</a> from stm32f1xx_it.o(.text.DMA1_Channel1_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[86]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[87]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[88]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[89]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b2]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b3]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b4]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b5]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[77]">DebugMon_Handler</a> from stm32f1xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[66]">Delay_start</a> from tasklist.o(.text.Delay_start) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[80]">EXTI0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a2]">EXTI15_10_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[81]">EXTI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[82]">EXTI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[83]">EXTI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[84]">EXTI4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[91]">EXTI9_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7e]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[aa]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[72]">HardFault_Handler</a> from stm32f1xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[9a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[99]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[9c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[9b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[18]">M_blink</a> from tasklist.o(.text.M_blink) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[10]">M_call_check</a> from tasklist.o(.text.M_call_check) referenced 6 times from tasklist.o(.data.Tasks)
 <LI><a href="#[20]">M_call_end</a> from tasklist.o(.text.M_call_end) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[1e]">M_call_init</a> from tasklist.o(.text.M_call_init) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[1f]">M_call_start</a> from tasklist.o(.text.M_call_start) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[1d]">M_sms_send</a> from tasklist.o(.text.M_sms_send) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[1c]">M_sms_start</a> from tasklist.o(.text.M_sms_start) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[1b]">M_srv_copy</a> from tasklist.o(.text.M_srv_copy) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[1a]">M_srv_send</a> from tasklist.o(.text.M_srv_send) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[19]">M_srv_start</a> from tasklist.o(.text.M_srv_start) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[6]">M_sub_at</a> from tasklist.o(.text.M_sub_at) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[b]">M_sub_check</a> from tasklist.o(.text.M_sub_check) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[8]">M_sub_creg</a> from tasklist.o(.text.M_sub_creg) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[a]">M_sub_csq</a> from tasklist.o(.text.M_sub_csq) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[7]">M_sub_echo</a> from tasklist.o(.text.M_sub_echo) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[14]">M_sub_gprs_IP</a> from tasklist.o(.text.M_sub_gprs_IP) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[13]">M_sub_gprs_connect</a> from tasklist.o(.text.M_sub_gprs_connect) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[12]">M_sub_gprs_cont</a> from tasklist.o(.text.M_sub_gprs_cont) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[11]">M_sub_gprs_exist</a> from tasklist.o(.text.M_sub_gprs_exist) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[9]">M_sub_imei</a> from tasklist.o(.text.M_sub_imei) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[4]">M_sub_power</a> from tasklist.o(.text.M_sub_power) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[5]">M_sub_reset</a> from tasklist.o(.text.M_sub_reset) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[c]">M_sub_sms</a> from tasklist.o(.text.M_sub_sms) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[e]">M_sub_sms_code</a> from tasklist.o(.text.M_sub_sms_code) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[f]">M_sub_sms_del</a> from tasklist.o(.text.M_sub_sms_del) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[d]">M_sub_sms_scr</a> from tasklist.o(.text.M_sub_sms_scr) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[15]">M_sub_srv_set_1</a> from tasklist.o(.text.M_sub_srv_set_1) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[17]">M_sub_srv_set_2</a> from tasklist.o(.text.M_sub_srv_set_2) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[16]">M_sub_tcp_start</a> from tasklist.o(.text.M_sub_tcp_start) referenced 4 times from tasklist.o(.data.Tasks)
 <LI><a href="#[73]">MemManage_Handler</a> from stm32f1xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3]">Modem_start_connect</a> from tasklist.o(.text.Modem_start_connect) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[2]">Modem_start_gprs</a> from tasklist.o(.text.Modem_start_gprs) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[0]">Modem_start_power</a> from tasklist.o(.text.Modem_start_power) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[1]">Modem_start_sms</a> from tasklist.o(.text.Modem_start_sms) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[71]">NMI_Handler</a> from stm32f1xx_it.o(.text.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6f]">NetReset</a> from tasklist.o(.text.NetReset) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[64]">Net_get</a> from tasklist.o(.text.Net_get) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[65]">Net_save</a> from tasklist.o(.text.Net_save) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[7b]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[21]">P_blink</a> from tasklist.o(.text.P_blink) referenced 2 times from tasklist.o(.data.Tasks)
 <LI><a href="#[78]">PendSV_Handler</a> from stm32f1xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7f]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a3]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7d]">RTC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[70]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[ab]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[9d]">SPI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[9e]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[ad]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[76]">SVC_Handler</a> from stm32f1xx_it.o(.text.SVC_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[79]">SysTick_Handler</a> from stm32f1xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b6]">SystemInit</a> from system_stm32f1xx.o(.text.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[7c]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[92]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[95]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[94]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[93]">TIM1_UP_IRQHandler</a> from stm32f1xx_it.o(.text.TIM1_UP_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[96]">TIM2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[97]">TIM3_IRQHandler</a> from stm32f1xx_it.o(.text.TIM3_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[98]">TIM4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[ac]">TIM5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b0]">TIM6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b1]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a5]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a8]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a7]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a6]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[ae]">UART4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[af]">UART5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[c2]">UART_DMAAbortOnError</a> from stm32f1xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32f1xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[9f]">USART1_IRQHandler</a> from stm32f1xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a0]">USART2_IRQHandler</a> from stm32f1xx_it.o(.text.USART2_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a1]">USART3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a4]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[75]">UsageFault_Handler</a> from stm32f1xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7a]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b7]">__main</a> from __main.o(!!!main) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[b8]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[bc]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[bb]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[bd]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[ba]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[b9]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[c5]">gp_input_process_ms</a> from gpio.o(.text.gp_input_process_ms) referenced 2 times from main.o(.text.main)
 <LI><a href="#[c6]">gp_input_process_sec</a> from gpio.o(.text.gp_input_process_sec) referenced 2 times from main.o(.text.main)
 <LI><a href="#[be]">isspace</a> from isspace.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[c3]">modem_connect_check</a> from modem.o(.text.modem_connect_check) referenced 2 times from main.o(.text.main)
 <LI><a href="#[c7]">sys_led_blink</a> from main.o(.text.sys_led_blink) referenced 2 times from main.o(.text.main)
 <LI><a href="#[c4]">sys_wdt_reset</a> from main.o(.text.sys_wdt_reset) referenced 2 times from main.o(.text.main)
 <LI><a href="#[ca]">task_archiver</a> from phase.o(.text.task_archiver) referenced 2 times from main.o(.text.main)
 <LI><a href="#[c9]">task_auto_start</a> from phase.o(.text.task_auto_start) referenced 2 times from main.o(.text.main)
 <LI><a href="#[c8]">task_net_start</a> from phase.o(.text.task_net_start) referenced 2 times from main.o(.text.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b7]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[cd]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[349]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[34a]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[34b]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[34c]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[34d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[ce]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[100]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[d0]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[d2]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d4]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d6]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d7]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d8]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[da]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[34e]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[dc]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[de]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[e0]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[34f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[ea]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[350]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[351]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[e2]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[352]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[353]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[354]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[355]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[356]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[357]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[358]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[359]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[35a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[35b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[35c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[35d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[35e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[35f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[360]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[361]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[362]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[363]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[364]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[365]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[ef]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[366]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[367]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[368]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[369]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[36a]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[36b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[36c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[cc]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[36d]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[e7]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e9]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[36e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[eb]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1252 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; serial_process &rArr; command_process &rArr; command_arc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[36f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[128]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ee]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[370]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[f0]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[70]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[11f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f2]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lines_num
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringC
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trim
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[f3]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_set_state
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_stat_one
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_value
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_step
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_run
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phase
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_scan
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_in
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_contlog
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_blink
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_bind
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_test
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phone
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_modem
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_wdt
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_timer
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_ns
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_addr
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_server
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_flash
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_romcrc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rom
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_elog
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_time
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_task
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_volt
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_err_set
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_tcp_write
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_process
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_start
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_addr
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_hex
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeFormat
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormatS
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormat
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_rep_end
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_rep_end
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_rep_end
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_save
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_delay_5sec
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_on
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_on
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_off
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_off
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_delay_5sec
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_on
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_on
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_off
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_off
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_force_trans
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_off
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_delay_5sec
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_on
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_on
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOff
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_on
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_finish
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_off
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_off
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOn
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_begin
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_start
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_start
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_tcp_start
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_IP
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_cont
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_check
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_adc
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_check
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew_adc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_state
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_rec_get
</UL>

<P><STRONG><a name="[f6]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[f7]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[f8]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f9]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f5]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[d5]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[cf]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[fb]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[d9]"></a>_printf_int_oct</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, _printf_oct_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[371]"></a>_printf_longlong_oct</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_oct_int.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>_printf_longlong_hex</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[db]"></a>_printf_int_hex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[d1]"></a>_printf_hex_ptr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[fe]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[101]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_step
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_run
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_in
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_contlog
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_bind
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phone
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_modem
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_wdt
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_timer
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_ns
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_addr
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_server
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_flash
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_romcrc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rom
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_elog
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_time
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_command
</UL>

<P><STRONG><a name="[103]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[260]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_command
</UL>

<P><STRONG><a name="[1df]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_waitResp
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_tcp_start
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
</UL>

<P><STRONG><a name="[23b]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_tcp_status
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_debug
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_scan
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_blink
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_bind
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phone
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_modem
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_wdt
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_flash
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_elog
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_time
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_task
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_command
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_task_check
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connect_check
</UL>

<P><STRONG><a name="[1d0]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_value
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_param
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_timer
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_start
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_status_n
</UL>

<P><STRONG><a name="[218]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at_num
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_run
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phone
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_server
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rom
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_time
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_hello
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_ver
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_data_trim
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_tcp_write
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_command
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_str
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_serial_process
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_addr
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_dump_str
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subString
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lines_num
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringNum
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringC
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trim
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeFormat
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormatS
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormat
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftString
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChar
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_waitResp
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_b1
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_str
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_num
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
</UL>

<P><STRONG><a name="[2fe]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connect_check
</UL>

<P><STRONG><a name="[1bb]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_debug
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_step
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_run
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phase
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_scan
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_in
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_contlog
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_blink
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_bind
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_test
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_sms
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gprs
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phone
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_modem
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_wdt
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_timer
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_ns
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rs
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_addr
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_server
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_flash
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_romcrc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rom
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_elog
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_time
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_task
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_hello
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_ver
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connect_check
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_dump_str
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexString
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_send
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_status
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_disconnected
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connected
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_status_n
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_rec_get
</UL>

<P><STRONG><a name="[2fa]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_buf_cpy
</UL>

<P><STRONG><a name="[372]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_clear
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
</UL>

<P><STRONG><a name="[375]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connect_check
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_dump_str
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lines_num
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringC
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeFormat
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormatS
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormat
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_status
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_disconnected
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connected
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_status_n
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[376]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1cf]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_debug
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_step
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_run
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phase
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_scan
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_in
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_contlog
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_blink
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_bind
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_stat_init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_init
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_start
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_creg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_status_n
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_rec_get
</UL>

<P><STRONG><a name="[304]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connect_check
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_disconnected
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connected
</UL>

<P><STRONG><a name="[377]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[108]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_elog
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subString
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_add
</UL>

<P><STRONG><a name="[1d9]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_debug
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gprs
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_modem
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_wdt
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_timer
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_ns
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_addr
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_server
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_flash
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_elog
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_time
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_get
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_creg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[378]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[10a]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[10c]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[fa]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[113]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f4]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[b9]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[dd]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[df]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[117]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[e1]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[118]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[104]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[102]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[ba]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>__strtod_int</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[11d]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[fc]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[37b]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[37c]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[37d]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[be]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[119]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[10e]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[e8]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[124]"></a>_scanf_really_real</STRONG> (Thumb, 684 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[ed]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[37f]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[348]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[f1]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[380]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(.text.ADC_DMAConvCplt))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[c1]"></a>ADC_DMAError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(.text.ADC_DMAError))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[c0]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(.text.ADC_DMAHalfConvCplt))
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[12f]"></a>ADC_Enable</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(.text.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[131]"></a>ADE7758_config</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, ade7758.o(.text.ADE7758_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ADE7758_config &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_test
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_init
</UL>

<P><STRONG><a name="[231]"></a>ADE7758_getCos</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ade7758.o(.text.ADE7758_getCos))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffers_save
</UL>

<P><STRONG><a name="[137]"></a>ADE7758_getFreq</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, ade7758.o(.text.ADE7758_getFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ADE7758_getFreq &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
</UL>

<P><STRONG><a name="[13c]"></a>ADE7758_getMaskInterrupts</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, ade7758.o(.text.ADE7758_getMaskInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ADE7758_getMaskInterrupts &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
</UL>

<P><STRONG><a name="[13d]"></a>ADE7758_getStatus</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ade7758.o(.text.ADE7758_getStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADE7758_getStatus &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdePower
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdeRms
</UL>

<P><STRONG><a name="[13e]"></a>ADE7758_getVa</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, ade7758.o(.text.ADE7758_getVa))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ADE7758_getVa &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_setCos
</UL>

<P><STRONG><a name="[13f]"></a>ADE7758_getVar</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, ade7758.o(.text.ADE7758_getVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ADE7758_getVar &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
</UL>

<P><STRONG><a name="[140]"></a>ADE7758_getVersion</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ade7758.o(.text.ADE7758_getVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ADE7758_getVersion &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_test
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>ADE7758_getWatt</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, ade7758.o(.text.ADE7758_getWatt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ADE7758_getWatt &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_setCos
</UL>

<P><STRONG><a name="[142]"></a>ADE7758_init</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ade7758.o(.text.ADE7758_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ADE7758_init &rArr; ADE7758_config &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_config
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_test
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReset
</UL>

<P><STRONG><a name="[144]"></a>ADE7758_resetStatus</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ade7758.o(.text.ADE7758_resetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADE7758_resetStatus &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdeRms
</UL>

<P><STRONG><a name="[145]"></a>ADE7758_rms_add</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, ade7758.o(.text.ADE7758_rms_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ADE7758_rms_add &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdeRms
</UL>

<P><STRONG><a name="[1e8]"></a>ADE7758_rms_clear</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ade7758.o(.text.ADE7758_rms_clear))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_get
</UL>

<P><STRONG><a name="[146]"></a>ADE7758_rms_get</STRONG> (Thumb, 650 bytes, Stack size 56 bytes, ade7758.o(.text.ADE7758_rms_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ADE7758_rms_get &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_get
</UL>

<P><STRONG><a name="[230]"></a>ADE7758_rms_val</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, ade7758.o(.text.ADE7758_rms_val))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffers_save
</UL>

<P><STRONG><a name="[148]"></a>ADE7758_setCos</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ade7758.o(.text.ADE7758_setCos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ADE7758_setCos &rArr; ADE7758_getVa &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVa
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getWatt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdePower
</UL>

<P><STRONG><a name="[14b]"></a>ADE7758_setPotLine</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, ade7758.o(.text.ADE7758_setPotLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ADE7758_setPotLine &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
</UL>

<P><STRONG><a name="[14c]"></a>ADE7758_setSPI</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ade7758.o(.text.ADE7758_setSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ADE7758_setSPI &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_test
</UL>

<P><STRONG><a name="[14d]"></a>ADE7758_startPotLine</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ade7758.o(.text.ADE7758_startPotLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ADE7758_startPotLine &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdePower
</UL>

<P><STRONG><a name="[37]"></a>A_FTrans</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.A_FTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = A_FTrans &rArr; task_force_trans &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_force_trans
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[32]"></a>A_KM2_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.A_KM2_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = A_KM2_on &rArr; A_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[35]"></a>A_KM3_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.A_KM3_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = A_KM3_off &rArr; A_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[24]"></a>A_KM4_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.A_KM4_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = A_KM4_off &rArr; A_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[31]"></a>A_KM4_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.A_KM4_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = A_KM4_on &rArr; A_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[25]"></a>A_KM5_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.A_KM5_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = A_KM5_off &rArr; A_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[30]"></a>A_KM5_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.A_KM5_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = A_KM5_on &rArr; A_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[26]"></a>A_KM6_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.A_KM6_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = A_KM6_off &rArr; A_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[2f]"></a>A_KM6_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.A_KM6_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = A_KM6_on &rArr; A_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[27]"></a>A_KM7_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.A_KM7_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = A_KM7_off &rArr; A_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[2d]"></a>A_KM7_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.A_KM7_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = A_KM7_on &rArr; A_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[28]"></a>A_KM8_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.A_KM8_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = A_KM8_off &rArr; A_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[2e]"></a>A_KM8_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.A_KM8_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = A_KM8_on &rArr; A_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[2b]"></a>A_KM9_check</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasklist.o(.text.A_KM9_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = A_KM9_check &rArr; A_KM9_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_on
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[29]"></a>A_KM9_off</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tasklist.o(.text.A_KM9_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = A_KM9_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_clr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[153]"></a>A_KM9_on</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tasklist.o(.text.A_KM9_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = A_KM9_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_check
</UL>

<P><STRONG><a name="[36]"></a>A_KM_Trans_off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.A_KM_Trans_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = A_KM_Trans_off &rArr; KM_Trans_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[33]"></a>A_KM_Trans_on</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.A_KM_Trans_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = A_KM_Trans_on &rArr; KM_Trans_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[150]"></a>A_KM_off</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, tasklist.o(.text.A_KM_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = A_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_clr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM3_off
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM8_off
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM7_off
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM6_off
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM5_off
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM4_off
</UL>

<P><STRONG><a name="[14f]"></a>A_KM_on</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, tasklist.o(.text.A_KM_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = A_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM2_on
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM4_on
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM5_on
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM6_on
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM8_on
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM7_on
</UL>

<P><STRONG><a name="[2c]"></a>A_TransOff</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.A_TransOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = A_TransOff &rArr; task_TransOff &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[23]"></a>A_TransOn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.A_TransOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = A_TransOn &rArr; task_TransOn &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[22]"></a>A_begin</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tasklist.o(.text.A_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = A_begin &rArr; task_step_begin &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_begin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[34]"></a>A_delay_5sec</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tasklist.o(.text.A_delay_5sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = A_delay_5sec &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[2a]"></a>A_finish</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tasklist.o(.text.A_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = A_finish &rArr; task_step_finish &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[68]"></a>A_rep_end</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasklist.o(.text.A_rep_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = A_rep_end &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_err_clr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[67]"></a>A_rep_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.A_rep_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = A_rep_start &rArr; task_repair_begin &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[6e]"></a>AdePower</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tasklist.o(.text.AdePower))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AdePower &rArr; ADE7758_setCos &rArr; ADE7758_getVa &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_setCos
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_startPotLine
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[6d]"></a>AdeRms</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, tasklist.o(.text.AdeRms))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AdeRms &rArr; ADE7758_rms_add &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_resetStatus
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_rms_add
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[4d]"></a>B_FTrans</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.B_FTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = B_FTrans &rArr; task_force_trans &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_force_trans
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[48]"></a>B_KM2_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.B_KM2_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = B_KM2_on &rArr; B_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[4b]"></a>B_KM3_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.B_KM3_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = B_KM3_off &rArr; B_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[3a]"></a>B_KM4_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.B_KM4_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = B_KM4_off &rArr; B_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[47]"></a>B_KM4_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.B_KM4_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = B_KM4_on &rArr; B_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[3b]"></a>B_KM5_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.B_KM5_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = B_KM5_off &rArr; B_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[46]"></a>B_KM5_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.B_KM5_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = B_KM5_on &rArr; B_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[3c]"></a>B_KM6_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.B_KM6_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = B_KM6_off &rArr; B_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[45]"></a>B_KM6_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.B_KM6_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = B_KM6_on &rArr; B_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[3d]"></a>B_KM7_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.B_KM7_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = B_KM7_off &rArr; B_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[43]"></a>B_KM7_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.B_KM7_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = B_KM7_on &rArr; B_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[3e]"></a>B_KM8_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.B_KM8_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = B_KM8_off &rArr; B_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[44]"></a>B_KM8_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.B_KM8_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = B_KM8_on &rArr; B_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[41]"></a>B_KM9_check</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasklist.o(.text.B_KM9_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = B_KM9_check &rArr; B_KM9_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_on
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_off
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[3f]"></a>B_KM9_off</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tasklist.o(.text.B_KM9_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = B_KM9_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_clr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[164]"></a>B_KM9_on</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tasklist.o(.text.B_KM9_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = B_KM9_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_check
</UL>

<P><STRONG><a name="[4c]"></a>B_KM_Trans_off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.B_KM_Trans_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = B_KM_Trans_off &rArr; KM_Trans_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[49]"></a>B_KM_Trans_on</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.B_KM_Trans_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = B_KM_Trans_on &rArr; KM_Trans_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[163]"></a>B_KM_off</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, tasklist.o(.text.B_KM_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = B_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_clr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM3_off
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM8_off
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM7_off
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM6_off
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM5_off
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM4_off
</UL>

<P><STRONG><a name="[162]"></a>B_KM_on</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, tasklist.o(.text.B_KM_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = B_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM2_on
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM4_on
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM5_on
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM6_on
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM8_on
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM7_on
</UL>

<P><STRONG><a name="[42]"></a>B_TransOff</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.B_TransOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = B_TransOff &rArr; task_TransOff &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[39]"></a>B_TransOn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.B_TransOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = B_TransOn &rArr; task_TransOn &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[38]"></a>B_begin</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tasklist.o(.text.B_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = B_begin &rArr; task_step_begin &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_begin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[4a]"></a>B_delay_5sec</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tasklist.o(.text.B_delay_5sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = B_delay_5sec &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[40]"></a>B_finish</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tasklist.o(.text.B_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = B_finish &rArr; task_step_finish &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[6a]"></a>B_rep_end</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasklist.o(.text.B_rep_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = B_rep_end &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_err_clr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[69]"></a>B_rep_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.B_rep_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = B_rep_start &rArr; task_repair_begin &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[74]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>C_FTrans</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.C_FTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = C_FTrans &rArr; task_force_trans &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_force_trans
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[5e]"></a>C_KM2_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.C_KM2_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = C_KM2_on &rArr; C_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[61]"></a>C_KM3_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.C_KM3_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = C_KM3_off &rArr; C_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[50]"></a>C_KM4_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.C_KM4_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = C_KM4_off &rArr; C_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[5d]"></a>C_KM4_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.C_KM4_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = C_KM4_on &rArr; C_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[51]"></a>C_KM5_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.C_KM5_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = C_KM5_off &rArr; C_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[5c]"></a>C_KM5_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.C_KM5_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = C_KM5_on &rArr; C_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[52]"></a>C_KM6_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.C_KM6_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = C_KM6_off &rArr; C_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[5b]"></a>C_KM6_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.C_KM6_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = C_KM6_on &rArr; C_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[53]"></a>C_KM7_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.C_KM7_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = C_KM7_off &rArr; C_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[59]"></a>C_KM7_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.C_KM7_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = C_KM7_on &rArr; C_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[54]"></a>C_KM8_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.C_KM8_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = C_KM8_off &rArr; C_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[5a]"></a>C_KM8_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasklist.o(.text.C_KM8_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = C_KM8_on &rArr; C_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[57]"></a>C_KM9_check</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasklist.o(.text.C_KM9_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = C_KM9_check &rArr; C_KM9_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_on
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_off
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[55]"></a>C_KM9_off</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tasklist.o(.text.C_KM9_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = C_KM9_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_clr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[167]"></a>C_KM9_on</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tasklist.o(.text.C_KM9_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = C_KM9_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_check
</UL>

<P><STRONG><a name="[62]"></a>C_KM_Trans_off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.C_KM_Trans_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = C_KM_Trans_off &rArr; KM_Trans_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[5f]"></a>C_KM_Trans_on</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.C_KM_Trans_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = C_KM_Trans_on &rArr; KM_Trans_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[166]"></a>C_KM_off</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, tasklist.o(.text.C_KM_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = C_KM_off &rArr; Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_clr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM3_off
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM8_off
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM7_off
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM6_off
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM5_off
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM4_off
</UL>

<P><STRONG><a name="[165]"></a>C_KM_on</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, tasklist.o(.text.C_KM_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = C_KM_on &rArr; Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM2_on
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM4_on
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM5_on
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM6_on
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM8_on
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM7_on
</UL>

<P><STRONG><a name="[58]"></a>C_TransOff</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.C_TransOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = C_TransOff &rArr; task_TransOff &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[4f]"></a>C_TransOn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.C_TransOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = C_TransOn &rArr; task_TransOn &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[4e]"></a>C_begin</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tasklist.o(.text.C_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = C_begin &rArr; task_step_begin &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_begin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[60]"></a>C_delay_5sec</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tasklist.o(.text.C_delay_5sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = C_delay_5sec &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[56]"></a>C_finish</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tasklist.o(.text.C_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = C_finish &rArr; task_step_finish &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[6c]"></a>C_rep_end</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasklist.o(.text.C_rep_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = C_rep_end &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_err_clr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[6b]"></a>C_rep_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasklist.o(.text.C_rep_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = C_rep_start &rArr; task_repair_begin &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[15a]"></a>Contactor_off</STRONG> (Thumb, 1008 bytes, Stack size 32 bytes, tasklist.o(.text.Contactor_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = Contactor_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_busy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_set
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_clr
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_clr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_P1
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_P2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_mode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_phase_in
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_logic_get
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_get
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_port_off
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_stat_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_stop
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_start
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_error
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_iter_manual
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_error
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_off
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_off
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_off
</UL>

<P><STRONG><a name="[15b]"></a>Contactor_on</STRONG> (Thumb, 1020 bytes, Stack size 32 bytes, tasklist.o(.text.Contactor_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = Contactor_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_busy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_set
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_clr
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_clr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_P1
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_P2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_mode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_phase_in
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_logic_get
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_get
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_port_on
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_stat_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_stop
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_start
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_error
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_iter_manual
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_error
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_on
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_on
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_on
</UL>

<P><STRONG><a name="[85]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>Delay_start</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tasklist.o(.text.Delay_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Delay_start &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint32
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_start
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[133]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read_UID
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_config
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_setSPI
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVersion
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_sector_erase
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write_enable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read24
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write24
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write_data
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVa
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVar
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getWatt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_setPotLine
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getFreq
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getMaskInterrupts
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_rms_get
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_chip_erase
</UL>

<P><STRONG><a name="[2ea]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 404 bytes, Stack size 12 bytes, stm32f1xx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpio.o(.text.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[12e]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(.text.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[12d]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(.text.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
</UL>

<P><STRONG><a name="[181]"></a>HAL_ADC_Init</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[182]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32f1xx_hal_msp.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[184]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(.text.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_Start_DMA &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_adc_rvalue
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_DMA_Abort</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f1xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, stm32f1xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 662 bytes, Stack size 8 bytes, stm32f1xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[183]"></a>HAL_DMA_Init</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f1xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[185]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f1xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[143]"></a>HAL_GPIO_Init</STRONG> (Thumb, 514 bytes, Stack size 48 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_port_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpin_init
</UL>

<P><STRONG><a name="[1db]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_get
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_P1
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_P2
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connect_check
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_reset
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_power
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_sim_detect
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_check
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_init
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_blink
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_reset
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_blink
</UL>

<P><STRONG><a name="[134]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read_data
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read_UID
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_config
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_blink
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_set
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_port_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_clr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_mode
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rs485_send
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_end
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_start
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVersion
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connect_check
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_addr
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_sector_erase
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write_enable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read24
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write24
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write_data
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReset
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_blink
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_blink
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_reset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_power_on
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_power
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_disconnected
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connected
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_power_off
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_set
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpin_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVa
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVar
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getWatt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_setPotLine
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getFreq
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getMaskInterrupts
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_rms_get
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_chip_erase
</UL>

<P><STRONG><a name="[130]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[186]"></a>HAL_I2C_Init</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[189]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 1078 bytes, Stack size 56 bytes, stm32f1xx_hal_i2c.o(.text.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_read
</UL>

<P><STRONG><a name="[18b]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, stm32f1xx_hal_i2c.o(.text.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_write
</UL>

<P><STRONG><a name="[187]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, stm32f1xx_hal_msp.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[210]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[18e]"></a>HAL_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f1xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>HAL_InitTick</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f1xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[191]"></a>HAL_MspInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[193]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[18f]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[19c]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_pwr.o(.text.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[194]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[197]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[198]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[188]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[196]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[195]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[199]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 948 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>HAL_RTC_Init</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, stm32f1xx_hal_rtc.o(.text.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19b]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f1xx_hal_msp.o(.text.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[132]"></a>HAL_SPI_Init</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read_UID
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_config
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_setSPI
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVersion
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_sector_erase
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write_enable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read24
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write24
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write_data
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVa
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVar
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getWatt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_setPotLine
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getFreq
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getMaskInterrupts
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_rms_get
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_chip_erase
</UL>

<P><STRONG><a name="[19d]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, stm32f1xx_hal_msp.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[136]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, stm32f1xx_hal_spi.o(.text.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read_data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_config
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_sector_erase
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write_enable
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write24
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write_data
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_startPotLine
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_setPotLine
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_chip_erase
</UL>

<P><STRONG><a name="[138]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 676 bytes, Stack size 32 bytes, stm32f1xx_hal_spi.o(.text.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read_UID
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVersion
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read24
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_startPotLine
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_resetStatus
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_rms_add
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVa
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVar
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getWatt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_setPotLine
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getFreq
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getMaskInterrupts
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_rms_get
</UL>

<P><STRONG><a name="[192]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2e9]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19f]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f1xx_hal_msp.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[2d5]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_start
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
</UL>

<P><STRONG><a name="[2eb]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d6]"></a>HAL_TIM_Base_Stop</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_Base_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_stop
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
</UL>

<P><STRONG><a name="[2e8]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 402 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_ConfigClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 368 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Task_timers
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, main.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; Task_timers
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_timers
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_tick_ms
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_tick_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 620 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_UART_Init</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_UART_MspInit</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, stm32f1xx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, serial.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_UART_Transmit</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at_num
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rs485_send
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_tcp_write
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_char
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_str
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_addr
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_char
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_b1
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_str
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
</UL>

<P><STRONG><a name="[1af]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, serial.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1ba]"></a>HexString</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, utility.o(.text.HexString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HexString
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
</UL>

<P><STRONG><a name="[158]"></a>KM_Trans_off</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, tasklist.o(.text.KM_Trans_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = KM_Trans_off &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_busy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_off
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_clr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_mode
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_on
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_port_off
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_stat_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_iter_manual
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_Trans_off
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_Trans_off
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_Trans_off
</UL>

<P><STRONG><a name="[159]"></a>KM_Trans_on</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, tasklist.o(.text.KM_Trans_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = KM_Trans_on &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_busy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_off
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_clr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_mode
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_on
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_port_off
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_stat_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_iter_manual
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_Trans_on
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_Trans_on
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_Trans_on
</UL>

<P><STRONG><a name="[1c0]"></a>M24M01_read</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, i2c.o(.text.M24M01_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_rec
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_romcrc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rom
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_float
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint32
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_last
</UL>

<P><STRONG><a name="[1c1]"></a>M24M01_write</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, i2c.o(.text.M24M01_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_clear
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rom
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_float
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint32
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_buffer
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_add
</UL>

<P><STRONG><a name="[18]"></a>M_blink</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tasklist.o(.text.M_blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M_blink
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[10]"></a>M_call_check</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tasklist.o(.text.M_call_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M_call_check &rArr; Task_by_name
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_running
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[20]"></a>M_call_end</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, tasklist.o(.text.M_call_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = M_call_end &rArr; Task_try &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_ready
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[1e]"></a>M_call_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tasklist.o(.text.M_call_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M_call_init &rArr; Task_by_name
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_running
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[1f]"></a>M_call_start</STRONG> (Thumb, 264 bytes, Stack size 104 bytes, tasklist.o(.text.M_call_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = M_call_start &rArr; gp_log_add &rArr; gp_log_last &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_num
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_ready
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_error
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_add
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[1d]"></a>M_sms_send</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, tasklist.o(.text.M_sms_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = M_sms_send &rArr; serial_write &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trim
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChar
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_ready
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_error
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_error
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[1c]"></a>M_sms_start</STRONG> (Thumb, 196 bytes, Stack size 88 bytes, tasklist.o(.text.M_sms_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = M_sms_start &rArr; gp_log_add &rArr; gp_log_last &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftString
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_ready
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_error
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_add
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[1b]"></a>M_srv_copy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tasklist.o(.text.M_srv_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = M_srv_copy &rArr; modem_buf_cpy &rArr; clearString &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_buf_cpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[1a]"></a>M_srv_send</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, tasklist.o(.text.M_srv_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = M_srv_send &rArr; modem_disconnected &rArr; serial_write_addr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_char
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_b1
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_str
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_ready
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_disconnected
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[19]"></a>M_srv_start</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, tasklist.o(.text.M_srv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = M_srv_start &rArr; Task_try &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_ready
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[6]"></a>M_sub_at</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, tasklist.o(.text.M_sub_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = M_sub_at &rArr; Task_try &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[b]"></a>M_sub_check</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, tasklist.o(.text.M_sub_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = M_sub_check &rArr; modem_status &rArr; serial_write_addr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_status
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[8]"></a>M_sub_creg</STRONG> (Thumb, 246 bytes, Stack size 112 bytes, tasklist.o(.text.M_sub_creg))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = M_sub_creg &rArr; modem_status &rArr; serial_write_addr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_status
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_num
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[a]"></a>M_sub_csq</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, tasklist.o(.text.M_sub_csq))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = M_sub_csq &rArr; Task_try &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftString
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_num
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[7]"></a>M_sub_echo</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, tasklist.o(.text.M_sub_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = M_sub_echo &rArr; Task_try &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[14]"></a>M_sub_gprs_IP</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, tasklist.o(.text.M_sub_gprs_IP))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = M_sub_gprs_IP &rArr; modem_status &rArr; serial_write_addr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_status
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_num
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[13]"></a>M_sub_gprs_connect</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, tasklist.o(.text.M_sub_gprs_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = M_sub_gprs_connect &rArr; Task_try &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[12]"></a>M_sub_gprs_cont</STRONG> (Thumb, 308 bytes, Stack size 128 bytes, tasklist.o(.text.M_sub_gprs_cont))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = M_sub_gprs_cont &rArr; Task_try &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[11]"></a>M_sub_gprs_exist</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, tasklist.o(.text.M_sub_gprs_exist))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = M_sub_gprs_exist &rArr; Task_try &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[9]"></a>M_sub_imei</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, tasklist.o(.text.M_sub_imei))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = M_sub_imei &rArr; Task_try &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_num
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[4]"></a>M_sub_power</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasklist.o(.text.M_sub_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M_sub_power
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_power_on
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_power_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[5]"></a>M_sub_reset</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasklist.o(.text.M_sub_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = M_sub_reset &rArr; modem_status_n &rArr; serial_write_addr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_status_n
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[c]"></a>M_sub_sms</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, tasklist.o(.text.M_sub_sms))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = M_sub_sms &rArr; Task_try &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[e]"></a>M_sub_sms_code</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, tasklist.o(.text.M_sub_sms_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = M_sub_sms_code &rArr; Task_try &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[f]"></a>M_sub_sms_del</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, tasklist.o(.text.M_sub_sms_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = M_sub_sms_del &rArr; Task_try &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[d]"></a>M_sub_sms_scr</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, tasklist.o(.text.M_sub_sms_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = M_sub_sms_scr &rArr; Task_try &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[15]"></a>M_sub_srv_set_1</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, tasklist.o(.text.M_sub_srv_set_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = M_sub_srv_set_1 &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[17]"></a>M_sub_srv_set_2</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, tasklist.o(.text.M_sub_srv_set_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = M_sub_srv_set_2 &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[16]"></a>M_sub_tcp_start</STRONG> (Thumb, 284 bytes, Stack size 128 bytes, tasklist.o(.text.M_sub_tcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = M_sub_tcp_start &rArr; Task_try &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_ready
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_flash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_error
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[73]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>Modem_start_connect</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasklist.o(.text.Modem_start_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = Modem_start_connect &rArr; modem_disconnected &rArr; serial_write_addr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_disconnected
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connected
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_status_n
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_goto
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start_sub_tp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[2]"></a>Modem_start_gprs</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tasklist.o(.text.Modem_start_gprs))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = Modem_start_gprs &rArr; modem_status_n &rArr; serial_write_addr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_status_n
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_goto
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start_sub_tp
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[0]"></a>Modem_start_power</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, tasklist.o(.text.Modem_start_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = Modem_start_power &rArr; modem_status_n &rArr; serial_write_addr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_power_off
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_status_n
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_sim_detect
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_goto
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start_sub_tp
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_stop
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[1]"></a>Modem_start_sms</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tasklist.o(.text.Modem_start_sms))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Modem_start_sms &rArr; Task_try &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start_sub_tp
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[71]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>NetReset</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasklist.o(.text.NetReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = NetReset &rArr; ADE7758_init &rArr; ADE7758_config &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Regulator_dt_net_reset
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[64]"></a>Net_get</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasklist.o(.text.Net_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Net_get &rArr; ADE7758_rms_get &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Regulator_dt_net_reset_get
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start_sub_tp
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_error
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_rms_get
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_rms_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[65]"></a>Net_save</STRONG> (Thumb, 548 bytes, Stack size 64 bytes, tasklist.o(.text.Net_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Net_save &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_avg_reg
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_last
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_get
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffers_save
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_last
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curr_last
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[21]"></a>P_blink</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasklist.o(.text.P_blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_blink
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasklist.o(.data.Tasks)
</UL>
<P><STRONG><a name="[78]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1bf]"></a>Phase_cont_off</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, phase.o(.text.Phase_cont_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Phase_cont_off &rArr; Ports_renew &rArr; delay_micros
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_clr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_P1
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_P2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_mode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_phase_in
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_logic_get
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_get
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortC_clr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_clr
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortA_clr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_cur
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_stop
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_start
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_off
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_on
</UL>

<P><STRONG><a name="[1be]"></a>Phase_cont_on</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, phase.o(.text.Phase_cont_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Phase_cont_on &rArr; Ports_renew &rArr; delay_micros
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_clr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_P1
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_P2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_mode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_phase_in
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_logic_get
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_get
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortC_set
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortA_set
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_cur
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_stop
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_start
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_off
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_on
</UL>

<P><STRONG><a name="[160]"></a>Phase_err_clr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, phase.o(.text.Phase_err_clr))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_rep_end
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_rep_end
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_rep_end
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_begin
</UL>

<P><STRONG><a name="[1fb]"></a>Phase_err_set</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, phase.o(.text.Phase_err_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Phase_err_set &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_clr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_finish
</UL>

<P><STRONG><a name="[1fc]"></a>Phase_get</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, phase.o(.text.Phase_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Phase_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_run
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phase
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_contlog
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
</UL>

<P><STRONG><a name="[1fd]"></a>Phase_init</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, phase.o(.text.Phase_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Phase_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[315]"></a>Phase_ns_on</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, phase.o(.text.Phase_ns_on))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_finish
</UL>

<P><STRONG><a name="[314]"></a>Phase_ns_port</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, phase.o(.text.Phase_ns_port))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
</UL>

<P><STRONG><a name="[151]"></a>Phase_num</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, phase.o(.text.Phase_num))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_run
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phase
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_avg_reg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_rep_end
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_rep_end
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_rep_end
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffers_save
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_save
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_delay_5sec
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_on
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_on
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_check
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_off
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_off
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_delay_5sec
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_on
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_on
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_check
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_off
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_off
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_force_trans
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_off
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_delay_5sec
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_on
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_on
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOff
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_on
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_check
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_finish
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_off
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_off
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOn
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_begin
</UL>

<P><STRONG><a name="[172]"></a>Phase_port_off</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, phase.o(.text.Phase_port_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Phase_port_off &rArr; Ports_renew &rArr; delay_micros
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortC_clr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_clr
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortA_clr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_off
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_on
</UL>

<P><STRONG><a name="[178]"></a>Phase_port_on</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, phase.o(.text.Phase_port_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Phase_port_on &rArr; Ports_renew &rArr; delay_micros
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortC_set
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortA_set
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
</UL>

<P><STRONG><a name="[1fe]"></a>Phase_repair_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, phase.o(.text.Phase_repair_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Phase_repair_on
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
</UL>

<P><STRONG><a name="[1ff]"></a>Phase_stat_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, phase.o(.text.Phase_stat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Phase_stat_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_begin
</UL>

<P><STRONG><a name="[168]"></a>Phase_stat_num</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, phase.o(.text.Phase_stat_num))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_off
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_on
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_finish
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_begin
</UL>

<P><STRONG><a name="[1f3]"></a>PortA_clr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ports.o(.text.PortA_clr))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_off
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_port_off
</UL>

<P><STRONG><a name="[2a6]"></a>PortA_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ports.o(.text.PortA_get))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
</UL>

<P><STRONG><a name="[200]"></a>PortA_in</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ports.o(.text.PortA_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PortA_in &rArr; Ports_in_set &rArr; delay_micros
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_set
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_in
</UL>

<P><STRONG><a name="[1f8]"></a>PortA_set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ports.o(.text.PortA_set))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_on
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_port_on
</UL>

<P><STRONG><a name="[1f5]"></a>PortB_clr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ports.o(.text.PortB_clr))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_off
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_port_off
</UL>

<P><STRONG><a name="[2a7]"></a>PortB_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ports.o(.text.PortB_get))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
</UL>

<P><STRONG><a name="[202]"></a>PortB_in</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ports.o(.text.PortB_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PortB_in &rArr; Ports_in_set &rArr; delay_micros
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_set
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_in
</UL>

<P><STRONG><a name="[1f9]"></a>PortB_set</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ports.o(.text.PortB_set))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_on
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_port_on
</UL>

<P><STRONG><a name="[1f6]"></a>PortC_clr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ports.o(.text.PortC_clr))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_off
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_port_off
</UL>

<P><STRONG><a name="[2a8]"></a>PortC_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ports.o(.text.PortC_get))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
</UL>

<P><STRONG><a name="[203]"></a>PortC_in</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ports.o(.text.PortC_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PortC_in &rArr; Ports_in_set &rArr; delay_micros
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_set
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_in
</UL>

<P><STRONG><a name="[1fa]"></a>PortC_set</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ports.o(.text.PortC_set))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_on
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_port_on
</UL>

<P><STRONG><a name="[155]"></a>Port_clr</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ports.o(.text.Port_clr))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_err_set
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_off
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_off
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_off
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_off
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_force_trans
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_off
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_off
</UL>

<P><STRONG><a name="[170]"></a>Port_get</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ports.o(.text.Port_get))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_off
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_on
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
</UL>

<P><STRONG><a name="[176]"></a>Port_phase_in</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ports.o(.text.Port_phase_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Port_phase_in &rArr; Ports_in_set &rArr; delay_micros
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_scan
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_off
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_on
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
</UL>

<P><STRONG><a name="[157]"></a>Port_set</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ports.o(.text.Port_set))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_on
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_on
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_on
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_on
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_force_trans
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_on
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_on
</UL>

<P><STRONG><a name="[241]"></a>Ports_bind_in_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ports.o(.text.Ports_bind_in_get))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_bind
</UL>

<P><STRONG><a name="[204]"></a>Ports_bind_in_read</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ports.o(.text.Ports_bind_in_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Ports_bind_in_read &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[205]"></a>Ports_bind_in_set</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ports.o(.text.Ports_bind_in_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Ports_bind_in_set &rArr; eeprom_write_buffer &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_bind
</UL>

<P><STRONG><a name="[240]"></a>Ports_bind_out_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ports.o(.text.Ports_bind_out_get))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_bind
</UL>

<P><STRONG><a name="[207]"></a>Ports_bind_out_read</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ports.o(.text.Ports_bind_out_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Ports_bind_out_read &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[208]"></a>Ports_bind_out_set</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ports.o(.text.Ports_bind_out_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Ports_bind_out_set &rArr; eeprom_write_buffer &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_bind
</UL>

<P><STRONG><a name="[16c]"></a>Ports_in_clr</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ports.o(.text.Ports_in_clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ports_in_clr &rArr; delay_micros
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_scan
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_in
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_off
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_on
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_off
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_on
</UL>

<P><STRONG><a name="[201]"></a>Ports_in_set</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, ports.o(.text.Ports_in_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Ports_in_set &rArr; delay_micros
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortC_in
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_in
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortA_in
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_phase_in
</UL>

<P><STRONG><a name="[209]"></a>Ports_init</STRONG> (Thumb, 504 bytes, Stack size 56 bytes, ports.o(.text.Ports_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Ports_init &rArr; gp_port_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_port_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_clr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171]"></a>Ports_logic_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ports.o(.text.Ports_logic_get))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_contlog
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_off
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_on
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
</UL>

<P><STRONG><a name="[24d]"></a>Ports_logic_port</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ports.o(.text.Ports_logic_port))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_contlog
</UL>

<P><STRONG><a name="[20b]"></a>Ports_logic_read</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ports.o(.text.Ports_logic_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Ports_logic_read &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20c]"></a>Ports_logic_set</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ports.o(.text.Ports_logic_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Ports_logic_set &rArr; eeprom_write_buffer &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_contlog
</UL>

<P><STRONG><a name="[156]"></a>Ports_renew</STRONG> (Thumb, 544 bytes, Stack size 64 bytes, ports.o(.text.Ports_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Ports_renew &rArr; delay_micros
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_err_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_off
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_on
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_port_off
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_port_on
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_on
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_on
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_off
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_off
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_on
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_on
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_off
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_off
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_force_trans
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_on
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_on
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_off
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_off
</UL>

<P><STRONG><a name="[169]"></a>Ports_scan_P1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ports.o(.text.Ports_scan_P1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ports_scan_P1
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_scan
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_off
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_on
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
</UL>

<P><STRONG><a name="[16d]"></a>Ports_scan_P2</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ports.o(.text.Ports_scan_P2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ports_scan_P2
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_scan
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_off
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_on
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
</UL>

<P><STRONG><a name="[16b]"></a>Ports_scan_busy</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ports.o(.text.Ports_scan_busy))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_off
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_on
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_finish
</UL>

<P><STRONG><a name="[16a]"></a>Ports_scan_mode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ports.o(.text.Ports_scan_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ports_scan_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_scan
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_off
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_on
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_off
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_on
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_finish
</UL>

<P><STRONG><a name="[20d]"></a>Regulator_dt_net</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, phase.o(.text.Regulator_dt_net))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Regulator_dt_net
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffers_save
</UL>

<P><STRONG><a name="[1e6]"></a>Regulator_dt_net_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, phase.o(.text.Regulator_dt_net_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Regulator_dt_net_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReset
</UL>

<P><STRONG><a name="[1e7]"></a>Regulator_dt_net_reset_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, phase.o(.text.Regulator_dt_net_reset_get))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_get
</UL>

<P><STRONG><a name="[20e]"></a>Regulator_dt_reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, phase.o(.text.Regulator_dt_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Regulator_dt_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_begin
</UL>

<P><STRONG><a name="[2ac]"></a>Regulator_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, phase.o(.text.Regulator_get))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[20f]"></a>Regulator_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, phase.o(.text.Regulator_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Regulator_init
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_UP_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Task_timers
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>TIM3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Task_timers
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1c3]"></a>Task_by_name</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(.text.Task_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_by_name
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_run
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_sms
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phone
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_modem
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_task
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_volt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_task_check
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_net_start
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOff
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOn
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_check
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_connect
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_gprs
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_sms
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_power
</UL>

<P><STRONG><a name="[2d0]"></a>Task_dt_update</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, tasks.o(.text.Task_dt_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Task_dt_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_time
</UL>

<P><STRONG><a name="[175]"></a>Task_error</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(.text.Task_error))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_get
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_send
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_tcp_start
</UL>

<P><STRONG><a name="[30e]"></a>Task_get_parent</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(.text.Task_get_parent))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
</UL>

<P><STRONG><a name="[1e2]"></a>Task_goto</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, tasks.o(.text.Task_goto))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Task_goto
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_connect
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_gprs
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_power
</UL>

<P><STRONG><a name="[2ef]"></a>Task_init</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, tasks.o(.text.Task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Task_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>Task_is_error</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text.Task_is_error))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_start
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_send
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_start
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_send
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_start
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_gprs
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_sms
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_power
</UL>

<P><STRONG><a name="[1c4]"></a>Task_is_running</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text.Task_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_sms
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_modem
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_task_check
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_net_start
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_check
</UL>

<P><STRONG><a name="[30d]"></a>Task_is_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text.Task_is_sub))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
</UL>

<P><STRONG><a name="[177]"></a>Task_iter_manual</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(.text.Task_iter_manual))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_off
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_on
</UL>

<P><STRONG><a name="[2cd]"></a>Task_num</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.Task_num))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_task
</UL>

<P><STRONG><a name="[211]"></a>Task_process</STRONG> (Thumb, 1076 bytes, Stack size 40 bytes, tasks.o(.text.Task_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Task_process &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e4]"></a>Task_start</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, tasks.o(.text.Task_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Task_start
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_err_set
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_archiver
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_start
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_power
</UL>

<P><STRONG><a name="[1e0]"></a>Task_start_sub_tp</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, tasks.o(.text.Task_start_sub_tp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_start_sub_tp
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOff
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOn
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_connect
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_gprs
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_sms
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_power
</UL>

<P><STRONG><a name="[212]"></a>Task_start_tp</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, tasks.o(.text.Task_start_tp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_start_tp
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_run
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_sms
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phone
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_task
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_volt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_task_check
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_net_start
</UL>

<P><STRONG><a name="[213]"></a>Task_stat_one</STRONG> (Thumb, 130 bytes, Stack size 144 bytes, tasks.o(.text.Task_stat_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Task_stat_one &rArr; timeFormat &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeFormat
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_task
</UL>

<P><STRONG><a name="[1e5]"></a>Task_stop</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, tasks.o(.text.Task_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Task_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_power
</UL>

<P><STRONG><a name="[215]"></a>Task_stop_tp</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, tasks.o(.text.Task_stop_tp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Task_stop_tp
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_task
</UL>

<P><STRONG><a name="[1ab]"></a>Task_timers</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, tasks.o(.text.Task_timers))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Task_timers
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[173]"></a>Task_try</STRONG> (Thumb, 84 bytes, Stack size 96 bytes, tasks.o(.text.Task_try))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Task_try &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_end
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_start
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_start
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_send
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_start
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_tcp_start
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_IP
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_connect
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_cont
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_exist
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms_del
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms_code
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms_scr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_csq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_imei
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_creg
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_echo
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_at
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_reset
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_sms
</UL>

<P><STRONG><a name="[2ee]"></a>Timers_init</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, timers.o(.text.Timers_init))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d1]"></a>Timers_next</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timers.o(.text.Timers_next))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_timer
</UL>

<P><STRONG><a name="[216]"></a>Timers_process</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, timers.o(.text.Timers_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timers_process
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[217]"></a>Timers_renew</STRONG> (Thumb, 784 bytes, Stack size 8 bytes, timers.o(.text.Timers_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timers_renew
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2cf]"></a>Timers_shift</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, timers.o(.text.Timers_shift))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_time
</UL>

<P><STRONG><a name="[17a]"></a>Timers_start</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, timers.o(.text.Timers_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timers_start
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_timer
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_start
</UL>

<P><STRONG><a name="[29a]"></a>Timers_status</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timers.o(.text.Timers_status))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_timer
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_archiver
</UL>

<P><STRONG><a name="[299]"></a>Timers_stop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timers.o(.text.Timers_stop))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_timer
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[1aa]"></a>Timers_tick_ms</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, timers.o(.text.Timers_tick_ms))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1ac]"></a>Timers_tick_sec</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, timers.o(.text.Timers_tick_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timers_tick_sec
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1cd]"></a>Trim</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, utility.o(.text.Trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Trim &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at_num
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_data_trim
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_command
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_send
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_num
</UL>

<P><STRONG><a name="[9f]"></a>USART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>USART2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[219]"></a>W25Q64_JEDEC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, w25q64.o(.text.W25Q64_JEDEC))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = W25Q64_JEDEC &rArr; W25Q64_read24 &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read24
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_archiver
</UL>

<P><STRONG><a name="[21b]"></a>W25Q64_chip_erase</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, w25q64.o(.text.W25Q64_chip_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = W25Q64_chip_erase &rArr; W25Q64_write_enable &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_stop
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_start
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_reset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write_enable
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
</UL>

<P><STRONG><a name="[21d]"></a>W25Q64_init</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, w25q64.o(.text.W25Q64_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = W25Q64_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21a]"></a>W25Q64_read24</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, w25q64.o(.text.W25Q64_read24))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = W25Q64_read24 &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_JEDEC
</UL>

<P><STRONG><a name="[21e]"></a>W25Q64_read_UID</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, w25q64.o(.text.W25Q64_read_UID))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = W25Q64_read_UID &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
</UL>

<P><STRONG><a name="[21f]"></a>W25Q64_read_data</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, w25q64.o(.text.W25Q64_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = W25Q64_read_data &rArr; W25Q64_write24 &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write24
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_save
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_rec_get
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_addr_count
</UL>

<P><STRONG><a name="[221]"></a>W25Q64_sector_erase</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, w25q64.o(.text.W25Q64_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = W25Q64_sector_erase &rArr; W25Q64_write24 &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write_enable
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write24
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write_data
</UL>

<P><STRONG><a name="[220]"></a>W25Q64_write24</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, w25q64.o(.text.W25Q64_write24))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = W25Q64_write24 &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read_data
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_sector_erase
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write_data
</UL>

<P><STRONG><a name="[222]"></a>W25Q64_write_data</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, w25q64.o(.text.W25Q64_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = W25Q64_write_data &rArr; W25Q64_sector_erase &rArr; W25Q64_write24 &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_sector_erase
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write_enable
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write24
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_save
</UL>

<P><STRONG><a name="[21c]"></a>W25Q64_write_enable</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, w25q64.o(.text.W25Q64_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = W25Q64_write_enable &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micros
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_sector_erase
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write_data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_chip_erase
</UL>

<P><STRONG><a name="[1ce]"></a>addChar</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, utility.o(.text.addChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = addChar &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at_num
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_bind
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_tcp_write
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_serial_process
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_waitResp
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_send
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_num
</UL>

<P><STRONG><a name="[223]"></a>arc_addr_count</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, arc.o(.text.arc_addr_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = arc_addr_count &rArr; W25Q64_read_data &rArr; W25Q64_write24 &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
</UL>

<P><STRONG><a name="[224]"></a>arc_idx_clear</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, arc.o(.text.arc_idx_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arc_idx_clear &rArr; eeprom_write_buffer &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_buffer
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_reset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
</UL>

<P><STRONG><a name="[225]"></a>arc_idx_count</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, arc.o(.text.arc_idx_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = arc_idx_count &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
</UL>

<P><STRONG><a name="[226]"></a>arc_idx_find</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, arc.o(.text.arc_idx_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = arc_idx_find &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
</UL>

<P><STRONG><a name="[227]"></a>arc_idx_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arc.o(.text.arc_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = arc_idx_get &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
</UL>

<P><STRONG><a name="[228]"></a>arc_idx_last</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, arc.o(.text.arc_idx_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = arc_idx_last &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
</UL>

<P><STRONG><a name="[229]"></a>arc_rec_get</STRONG> (Thumb, 328 bytes, Stack size 192 bytes, arc.o(.text.arc_rec_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = arc_rec_get &rArr; W25Q64_read_data &rArr; W25Q64_write24 &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read_data
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
</UL>

<P><STRONG><a name="[22a]"></a>arc_save</STRONG> (Thumb, 632 bytes, Stack size 144 bytes, arc.o(.text.arc_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = arc_save &rArr; W25Q64_write_data &rArr; W25Q64_sector_erase &rArr; W25Q64_write24 &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read_data
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_buffer
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_check
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_archiver
</UL>

<P><STRONG><a name="[22c]"></a>auto_volt_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, net.o(.text.auto_volt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = auto_volt_get &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22d]"></a>auto_volt_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net.o(.text.auto_volt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = auto_volt_set &rArr; eeprom_write_byte &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
</UL>

<P><STRONG><a name="[22e]"></a>boost_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, net.o(.text.boost_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = boost_get &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22f]"></a>boost_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net.o(.text.boost_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = boost_set &rArr; eeprom_write_byte &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
</UL>

<P><STRONG><a name="[1e9]"></a>buffers_save</STRONG> (Thumb, 732 bytes, Stack size 72 bytes, net.o(.text.buffers_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = buffers_save &rArr; buffers_save_one &rArr; roundf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Regulator_dt_net
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getCos
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_rms_val
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffers_save_one
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_save
</UL>

<P><STRONG><a name="[233]"></a>buffers_save_one</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, net.o(.text.buffers_save_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = buffers_save_one &rArr; roundf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffers_save
</UL>

<P><STRONG><a name="[22b]"></a>bytes_check</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, utility.o(.text.bytes_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bytes_check
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_save
</UL>

<P><STRONG><a name="[237]"></a>bytes_dump_str</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, utility.o(.text.bytes_dump_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = bytes_dump_str &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
</UL>

<P><STRONG><a name="[2ce]"></a>calendar_date_to_timestamp</STRONG> (Thumb, 1092 bytes, Stack size 32 bytes, calendar.o(.text.calendar_date_to_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = calendar_date_to_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_time
</UL>

<P><STRONG><a name="[23d]"></a>calendar_timestamp_to_date</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, calendar.o(.text.calendar_timestamp_to_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = calendar_timestamp_to_date
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_archiver
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeFormat
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormatS
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormat
</UL>

<P><STRONG><a name="[1ca]"></a>clearString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, utility.o(.text.clearString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = clearString &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at_num
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rs485_process
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_waitResp
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_end
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_start
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_send
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_start
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_buf_cpy
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_send
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_srv_set_2
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_tcp_start
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_IP
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_csq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_imei
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_num
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_creg
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_rec_get
</UL>

<P><STRONG><a name="[305]"></a>cmd_src_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utility.o(.text.cmd_src_read))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_serial_process
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connect_check
</UL>

<P><STRONG><a name="[2fd]"></a>cmd_src_write</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utility.o(.text.cmd_src_write))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rs485_process
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_serial_process
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
</UL>

<P><STRONG><a name="[238]"></a>command_addr</STRONG> (Thumb, 258 bytes, Stack size 72 bytes, commands.o(.text.command_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = command_addr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[23a]"></a>command_arc</STRONG> (Thumb, 1572 bytes, Stack size 520 bytes, commands.o(.text.command_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028 + Unknown Stack Size
<LI>Call Chain = command_arc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_idx_get
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_idx_last
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read_data
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read_UID
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_save
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_JEDEC
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_dump_str
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_hex
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_reset
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_timestamp_to_date
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_idx_count
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_rec_get
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_idx_find
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_chip_erase
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_idx_clear
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_addr_count
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[23e]"></a>command_bind</STRONG> (Thumb, 1286 bytes, Stack size 200 bytes, commands.o(.text.command_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = command_bind &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_bind_in_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_bind_out_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_bind_in_get
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_bind_out_get
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramString
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChar
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[242]"></a>command_blink</STRONG> (Thumb, 580 bytes, Stack size 112 bytes, commands.o(.text.command_blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = command_blink &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_reset
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramString
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[243]"></a>command_cal</STRONG> (Thumb, 2808 bytes, Stack size 192 bytes, commands.o(.text.command_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = command_cal &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramString
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVa
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVar
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getWatt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_setPotLine
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_kt_curr_get
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_kt_curr_set
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_kt_volt_get
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_kt_volt_set
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getFreq
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getMaskInterrupts
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getStatus
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_rms_val
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_rms_get
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_rms_clear
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[24b]"></a>command_cont</STRONG> (Thumb, 528 bytes, Stack size 200 bytes, commands.o(.text.command_cont))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = command_cont &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_clr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_P1
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_P2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_mode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_phase_in
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_port_off
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_port_on
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_get
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_cur
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_stop
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_start
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramString
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[24c]"></a>command_contlog</STRONG> (Thumb, 416 bytes, Stack size 152 bytes, commands.o(.text.command_contlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = command_contlog &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_logic_port
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_logic_set
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_logic_get
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_get
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[24e]"></a>command_debug</STRONG> (Thumb, 452 bytes, Stack size 112 bytes, commands.o(.text.command_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = command_debug &rArr; debug_ports_get &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_ports_get
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_error_get
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_mess_get
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramString
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_ports_set
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_mess_set
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_error_set
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[255]"></a>command_elog</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, commands.o(.text.command_elog))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = command_elog &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_reidx
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_clear
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_cnt_get
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_idx
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_rec
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormatS
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[25c]"></a>command_flash</STRONG> (Thumb, 472 bytes, Stack size 128 bytes, commands.o(.text.command_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = command_flash &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint32
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint32
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormat
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[25f]"></a>command_gp</STRONG> (Thumb, 4676 bytes, Stack size 208 bytes, commands.o(.text.command_gp))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = command_gp &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_set_state
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_max_getF
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_cnt_get
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_cnt_set
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_inverse_min
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_min
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_min_getF
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_min_set
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_call_mode_get
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_call_delay
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_call_number
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_call_rec
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_call_read
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_call_save
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_call_mode_set
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_delay
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_get
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_max_get
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_imp_delay
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_bit
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_max_save
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_write_delay
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_write_bit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_max_saveF
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_min_saveF
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_zvalue_write
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_zvalue_read
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_adc_rvalue
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_mode_save
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_kt_read
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_kt_save
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_call_retries_get
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_dtCall_get
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_set
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_inverse
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_write
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_get_prv
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_get_upd
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_mode
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_value
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringC
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormat
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[28d]"></a>command_gprs</STRONG> (Thumb, 408 bytes, Stack size 104 bytes, commands.o(.text.command_gprs))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = command_gprs &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_buffer
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[28e]"></a>command_hello</STRONG> (Thumb, 360 bytes, Stack size 80 bytes, commands.o(.text.command_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = command_hello &rArr; gp_value &rArr; gp_adc_rvalue &rArr; HAL_ADC_Start_DMA &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_value
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_param
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormatS
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[290]"></a>command_in</STRONG> (Thumb, 314 bytes, Stack size 152 bytes, commands.o(.text.command_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = command_in &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortC_in
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_in
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortA_in
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_clr
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramString
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[291]"></a>command_mem</STRONG> (Thumb, 1256 bytes, Stack size 36 bytes, commands.o(.text.command_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = command_mem &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_write
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_read
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_stop
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_micros_start
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_reset
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexString
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[293]"></a>command_modem</STRONG> (Thumb, 496 bytes, Stack size 152 bytes, commands.o(.text.command_modem))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = command_modem &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at_num
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_serial_clean
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_tcp_status
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_running
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[298]"></a>command_net</STRONG> (Thumb, 3404 bytes, Stack size 176 bytes, commands.o(.text.command_net))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = command_net &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_avg_reg
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_last
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_avg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curr_avg
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_min
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_max
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_avg
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_get
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Regulator_dt_net
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVersion
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_status
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_stop
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_start
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramString
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_info
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_last
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curr_last
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2a1]"></a>command_ns</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, commands.o(.text.command_ns))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = command_ns &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2a2]"></a>command_phase</STRONG> (Thumb, 240 bytes, Stack size 216 bytes, commands.o(.text.command_phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = command_phase &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_last
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_get
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramString
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2a3]"></a>command_phone</STRONG> (Thumb, 2120 bytes, Stack size 120 bytes, commands.o(.text.command_phone))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = command_phone &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_buffer
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start_tp
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phone_num
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toHex
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2a5]"></a>command_port</STRONG> (Thumb, 940 bytes, Stack size 160 bytes, commands.o(.text.command_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = command_port &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortC_get
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_get
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortA_get
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortC_clr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_clr
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortA_clr
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortC_set
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortA_set
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramString
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2a9]"></a>command_process</STRONG> (Thumb, 1680 bytes, Stack size 80 bytes, commands.o(.text.command_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108 + Unknown Stack Size
<LI>Call Chain = command_process &rArr; command_arc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_debug
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_step
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_run
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phase
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_scan
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_in
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_contlog
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_blink
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_bind
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_test
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_sms
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gprs
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phone
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_modem
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_wdt
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_timer
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_ns
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rs
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_addr
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_server
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_flash
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_romcrc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rom
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_elog
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_time
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_task
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_hello
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_ver
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Regulator_get
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_stop
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
</UL>

<P><STRONG><a name="[2ae]"></a>command_rom</STRONG> (Thumb, 520 bytes, Stack size 296 bytes, commands.o(.text.command_rom))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = command_rom &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_write
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_read
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_reset
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toHex
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftData
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2af]"></a>command_romcrc</STRONG> (Thumb, 252 bytes, Stack size 192 bytes, commands.o(.text.command_romcrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = command_romcrc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_read
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_reset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2b1]"></a>command_rs</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, commands.o(.text.command_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = command_rs &rArr; serial_rs485_prepare &rArr; serial_rs485_send &rArr; paramStringNum &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rs485_prepare
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_data_trim
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_data_len
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftString
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2b8]"></a>command_run</STRONG> (Thumb, 552 bytes, Stack size 208 bytes, commands.o(.text.command_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = command_run &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_get
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start_tp
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_count_get
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramString
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2b7]"></a>command_scan</STRONG> (Thumb, 2280 bytes, Stack size 240 bytes, commands.o(.text.command_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = command_scan &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_clr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_P1
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_P2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_mode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_phase_in
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramString
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2b0]"></a>command_server</STRONG> (Thumb, 628 bytes, Stack size 104 bytes, commands.o(.text.command_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = command_server &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_buffer
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2b3]"></a>command_set</STRONG> (Thumb, 1800 bytes, Stack size 112 bytes, commands.o(.text.command_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = command_set &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kt_set
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;points_set
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_time_set
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_volt_set
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;range_minmax_set
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boost_set
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_minmax_set
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_count_set
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_buffer
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_volt_get
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;range_max_get
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;range_min_get
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_max_get
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_min_get
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_count_get
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kt_get
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boost_get
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_time_get
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;points_get
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2b5]"></a>command_sms</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, commands.o(.text.command_sms))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = command_sms &rArr; paramStringMax &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start_tp
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_running
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2b9]"></a>command_step</STRONG> (Thumb, 692 bytes, Stack size 208 bytes, commands.o(.text.command_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = command_step &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_get
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_count_get
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramString
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_set
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2ab]"></a>command_task</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, commands.o(.text.command_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = command_task &rArr; Task_stat_one &rArr; timeFormat &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_stop_tp
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_stat_one
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_num
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start_tp
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2b6]"></a>command_test</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, commands.o(.text.command_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = command_test &rArr; ADE7758_init &rArr; ADE7758_config &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_config
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_setSPI
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVersion
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2ad]"></a>command_time</STRONG> (Thumb, 476 bytes, Stack size 120 bytes, commands.o(.text.command_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = command_time &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_dt_update
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint32
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_date_to_timestamp
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_shift
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormat
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2b2]"></a>command_timer</STRONG> (Thumb, 408 bytes, Stack size 88 bytes, commands.o(.text.command_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = command_timer &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_next
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_status
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_stop
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_start
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormat
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2aa]"></a>command_ver</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, commands.o(.text.command_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = command_ver &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[2b4]"></a>command_wdt</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, commands.o(.text.command_wdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = command_wdt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_cnt
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_max
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_max_write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_reset
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringMax
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[29d]"></a>cos_avg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, net.o(.text.cos_avg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cos_avg &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_archiver
</UL>

<P><STRONG><a name="[1eb]"></a>cos_last</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net.o(.text.cos_last))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_save
</UL>

<P><STRONG><a name="[1f7]"></a>counter_micros_cur</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, utility.o(.text.counter_micros_cur))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_off
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_on
</UL>

<P><STRONG><a name="[16e]"></a>counter_micros_start</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, utility.o(.text.counter_micros_start))
<BR><BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_off
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_on
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_chip_erase
</UL>

<P><STRONG><a name="[16f]"></a>counter_micros_stop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, utility.o(.text.counter_micros_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = counter_micros_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_off
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_on
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_chip_erase
</UL>

<P><STRONG><a name="[292]"></a>crc16</STRONG> (Thumb, 424 bytes, Stack size 16 bytes, utility.o(.text.crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_romcrc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rom
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_addr
</UL>

<P><STRONG><a name="[29c]"></a>curr_avg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, net.o(.text.curr_avg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = curr_avg &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_archiver
</UL>

<P><STRONG><a name="[1ed]"></a>curr_last</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net.o(.text.curr_last))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_save
</UL>

<P><STRONG><a name="[25e]"></a>dateFormat</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, utility.o(.text.dateFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = dateFormat &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_timestamp_to_date
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_value
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_timer
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_flash
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_time
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[257]"></a>dateFormatS</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, utility.o(.text.dateFormatS))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = dateFormatS &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_timestamp_to_date
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_set_state
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_value
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_elog
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_hello
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_check
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew_adc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_state
</UL>

<P><STRONG><a name="[250]"></a>debug_error_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, net.o(.text.debug_error_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = debug_error_get &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_debug
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24f]"></a>debug_error_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net.o(.text.debug_error_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = debug_error_set &rArr; eeprom_write_byte &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_debug
</UL>

<P><STRONG><a name="[252]"></a>debug_mess_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, net.o(.text.debug_mess_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = debug_mess_get &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_debug
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[251]"></a>debug_mess_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net.o(.text.debug_mess_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = debug_mess_set &rArr; eeprom_write_byte &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_debug
</UL>

<P><STRONG><a name="[254]"></a>debug_ports_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, net.o(.text.debug_ports_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = debug_ports_get &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_debug
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[253]"></a>debug_ports_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net.o(.text.debug_ports_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = debug_ports_set &rArr; eeprom_write_byte &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_debug
</UL>

<P><STRONG><a name="[135]"></a>delay_micros</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, utility.o(.text.delay_micros))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_micros
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read_data
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read_UID
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_config
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_set
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_clr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVersion
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_sector_erase
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write_enable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_read24
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write24
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_write_data
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVa
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVar
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getWatt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_setPotLine
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getFreq
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getMaskInterrupts
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_rms_get
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_chip_erase
</UL>

<P><STRONG><a name="[1f4]"></a>delay_millis</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, utility.o(.text.delay_millis))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_millis
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_scan
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_blink
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rom
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_float
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint32
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_float
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint32
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_buffer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_off
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_cont_on
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
</UL>

<P><STRONG><a name="[2c7]"></a>des_time_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, net.o(.text.des_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = des_time_get &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c6]"></a>des_time_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net.o(.text.des_time_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = des_time_set &rArr; eeprom_write_byte &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
</UL>

<P><STRONG><a name="[1da]"></a>eeprom_read_buffer</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, eeprom.o(.text.eeprom_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_read
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_idx_get
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_idx_last
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_zvalue_read
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gprs
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phone
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_server
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_ver
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_save
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_logic_read
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_bind_in_read
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_bind_out_read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_srv_set_2
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_srv_set_1
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_cont
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_idx_count
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_idx_find
</UL>

<P><STRONG><a name="[17d]"></a>eeprom_read_byte</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, eeprom.o(.text.eeprom_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_read
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_call_read
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gprs
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_server
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_flash
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_ver
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_volt_get
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_ports_get
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_error_get
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_mess_get
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_count_get
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kt_get
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boost_get
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_time_get
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;points_get
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_start
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_srv_set_2
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_srv_set_1
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_cont
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_adc
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_check
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_set
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_init
</UL>

<P><STRONG><a name="[2d7]"></a>eeprom_read_float</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, eeprom.o(.text.eeprom_read_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = eeprom_read_float &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_read
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_kt_read
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_kt_curr_get
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_kt_volt_get
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_read
</UL>

<P><STRONG><a name="[17f]"></a>eeprom_read_uint16</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, eeprom.o(.text.eeprom_read_uint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_read
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_clear
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_cnt_get
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_server
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_flash
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;range_max_get
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;range_min_get
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_max_get
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_min_get
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_addr_read
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_max_read
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_start
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_srv_set_2
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_srv_set_1
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_last
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_add
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_init
</UL>

<P><STRONG><a name="[25d]"></a>eeprom_read_uint32</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, eeprom.o(.text.eeprom_read_uint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = eeprom_read_uint32 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_read
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_kt_read
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_get_prv
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_flash
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_time
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_kt_curr_get
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_kt_volt_get
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_read
</UL>

<P><STRONG><a name="[206]"></a>eeprom_write_buffer</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, eeprom.o(.text.eeprom_write_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = eeprom_write_buffer &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_write
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_zvalue_write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gprs
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phone
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_server
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_logic_set
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_bind_in_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_bind_out_set
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_save
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_idx_clear
</UL>

<P><STRONG><a name="[17e]"></a>eeprom_write_byte</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, eeprom.o(.text.eeprom_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = eeprom_write_byte &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_write
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kt_set
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;points_set
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_time_set
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_volt_set
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boost_set
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_count_set
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_set_state
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_min_set
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_call_save
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_call_mode_set
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_write_delay
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_write_bit
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_mode_save
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_set
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gprs
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_server
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_start
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_ports_set
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_mess_set
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_error_set
</UL>

<P><STRONG><a name="[2d8]"></a>eeprom_write_float</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, eeprom.o(.text.eeprom_write_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = eeprom_write_float &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_write
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_max_saveF
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_min_saveF
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_kt_save
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_set
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_kt_curr_set
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_kt_volt_set
</UL>

<P><STRONG><a name="[180]"></a>eeprom_write_uint16</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, eeprom.o(.text.eeprom_write_uint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = eeprom_write_uint16 &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_write
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;range_minmax_set
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_minmax_set
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_clear
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_min_set
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_write_delay
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_write_bit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_set
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_write
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_addr
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_server
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_flash
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_max_write
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_start
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_last
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_add
</UL>

<P><STRONG><a name="[17c]"></a>eeprom_write_uint32</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, eeprom.o(.text.eeprom_write_uint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = eeprom_write_uint32 &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_write
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_cnt_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_max_save
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_flash
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_start
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_dt2_save
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_check
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew_adc
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_set
</UL>

<P><STRONG><a name="[308]"></a>fifo_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fifo.o(.text.fifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_serial_init
</UL>

<P><STRONG><a name="[271]"></a>gp_adc_rvalue</STRONG> (Thumb, 1712 bytes, Stack size 232 bytes, gpio.o(.text.gp_adc_rvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = gp_adc_rvalue &rArr; HAL_ADC_Start_DMA &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_value
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_adc
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew_adc
</UL>

<P><STRONG><a name="[268]"></a>gp_bind</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpio.o(.text.gp_bind))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[269]"></a>gp_bind_inverse</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpio.o(.text.gp_bind_inverse))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[288]"></a>gp_bind_inverse_min</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpio.o(.text.gp_bind_inverse_min))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[287]"></a>gp_bind_min</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpio.o(.text.gp_bind_min))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[285]"></a>gp_bind_min_set</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, gpio.o(.text.gp_bind_min_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = gp_bind_min_set &rArr; gp_bind_renew &rArr; gp_set_state &rArr; gp_log_add &rArr; gp_log_last &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[267]"></a>gp_bind_renew</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, gpio.o(.text.gp_bind_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = gp_bind_renew &rArr; gp_set_state &rArr; gp_log_add &rArr; gp_log_last &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_set_state
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_adc_rvalue
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_set
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_min_set
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_set
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_init
</UL>

<P><STRONG><a name="[2dc]"></a>gp_bind_renew_adc</STRONG> (Thumb, 260 bytes, Stack size 152 bytes, gpio.o(.text.gp_bind_renew_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = gp_bind_renew_adc &rArr; gp_set_state &rArr; gp_log_add &rArr; gp_log_last &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_set_state
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_adc_rvalue
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint32
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormatS
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_adc
</UL>

<P><STRONG><a name="[26a]"></a>gp_bind_set</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, gpio.o(.text.gp_bind_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = gp_bind_set &rArr; gp_bind_renew &rArr; gp_set_state &rArr; gp_log_add &rArr; gp_log_last &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[2dd]"></a>gp_bind_value</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, gpio.o(.text.gp_bind_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gp_bind_value &rArr; gp_set &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_set
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_set_state
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_check
</UL>

<P><STRONG><a name="[283]"></a>gp_call_delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text.gp_call_delay))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[284]"></a>gp_call_mode_get</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpio.o(.text.gp_call_mode_get))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[27e]"></a>gp_call_mode_set</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gpio.o(.text.gp_call_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gp_call_mode_set &rArr; eeprom_write_byte &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[282]"></a>gp_call_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(.text.gp_call_number))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[280]"></a>gp_call_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gpio.o(.text.gp_call_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gp_call_read &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[281]"></a>gp_call_rec</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(.text.gp_call_rec))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[26c]"></a>gp_call_retries_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text.gp_call_retries_get))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[27f]"></a>gp_call_save</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, gpio.o(.text.gp_call_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gp_call_save &rArr; eeprom_write_byte &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[28a]"></a>gp_cnt_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text.gp_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[289]"></a>gp_cnt_set</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gpio.o(.text.gp_cnt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gp_cnt_set &rArr; eeprom_write_uint32 &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint32
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_check
</UL>

<P><STRONG><a name="[26d]"></a>gp_conf</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text.gp_conf))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[279]"></a>gp_conf_bit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(.text.gp_conf_bit))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[2de]"></a>gp_conf_init</STRONG> (Thumb, 688 bytes, Stack size 32 bytes, gpio.o(.text.gp_conf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gp_conf_init &rArr; gp_set &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_float
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint32
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_set
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_mode_save
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_init
</UL>

<P><STRONG><a name="[266]"></a>gp_conf_write</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, gpio.o(.text.gp_conf_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gp_conf_write &rArr; eeprom_write_byte &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[276]"></a>gp_conf_write_bit</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, gpio.o(.text.gp_conf_write_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gp_conf_write_bit &rArr; eeprom_write_byte &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[277]"></a>gp_conf_write_delay</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, gpio.o(.text.gp_conf_write_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gp_conf_write_delay &rArr; eeprom_write_byte &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[27d]"></a>gp_delay</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text.gp_delay))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[2df]"></a>gp_dt2_save</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio.o(.text.gp_dt2_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gp_dt2_save &rArr; eeprom_write_uint32 &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint32
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_check
</UL>

<P><STRONG><a name="[26b]"></a>gp_dtCall_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text.gp_dtCall_get))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[27c]"></a>gp_get</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gpio.o(.text.gp_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gp_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[265]"></a>gp_get_prv</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gpio.o(.text.gp_get_prv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gp_get_prv &rArr; eeprom_read_uint32 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[264]"></a>gp_get_upd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text.gp_get_upd))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[27a]"></a>gp_imp_delay</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gpio.o(.text.gp_imp_delay))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[2e0]"></a>gp_init</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, gpio.o(.text.gp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = gp_init &rArr; gp_bind_renew &rArr; gp_set_state &rArr; gp_log_add &rArr; gp_log_last &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e2]"></a>gp_input_adc</STRONG> (Thumb, 612 bytes, Stack size 64 bytes, gpio.o(.text.gp_input_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = gp_input_adc &rArr; gp_bind_renew_adc &rArr; gp_set_state &rArr; gp_log_add &rArr; gp_log_last &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_adc_rvalue
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew_adc
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_add
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_process_sec
</UL>

<P><STRONG><a name="[2e3]"></a>gp_input_check</STRONG> (Thumb, 550 bytes, Stack size 136 bytes, gpio.o(.text.gp_input_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = gp_input_check &rArr; gp_log_state &rArr; dateFormatS &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_cnt_set
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint32
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormatS
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_dt2_save
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_state
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_add
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_value
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_process_sec
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_process_ms
</UL>

<P><STRONG><a name="[c5]"></a>gp_input_process_ms</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, gpio.o(.text.gp_input_process_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = gp_input_process_ms &rArr; gp_input_check &rArr; gp_log_state &rArr; dateFormatS &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[c6]"></a>gp_input_process_sec</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, gpio.o(.text.gp_input_process_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = gp_input_process_sec &rArr; gp_input_adc &rArr; gp_bind_renew_adc &rArr; gp_set_state &rArr; gp_log_add &rArr; gp_log_last &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_adc
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[26f]"></a>gp_kt_read</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gpio.o(.text.gp_kt_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gp_kt_read &rArr; eeprom_read_float &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_float
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[26e]"></a>gp_kt_save</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gpio.o(.text.gp_kt_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gp_kt_save &rArr; eeprom_write_float &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_float
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[1cc]"></a>gp_log_add</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, gpio.o(.text.gp_log_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = gp_log_add &rArr; gp_log_last &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_write
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_last
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_set_state
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_start
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_start
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_adc
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_check
</UL>

<P><STRONG><a name="[25a]"></a>gp_log_clear</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, gpio.o(.text.gp_log_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gp_log_clear &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_write
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_reset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_elog
</UL>

<P><STRONG><a name="[259]"></a>gp_log_cnt_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio.o(.text.gp_log_cnt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gp_log_cnt_get &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_elog
</UL>

<P><STRONG><a name="[258]"></a>gp_log_idx</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gpio.o(.text.gp_log_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gp_log_idx &rArr; gp_log_last &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_last
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_elog
</UL>

<P><STRONG><a name="[2e6]"></a>gp_log_last</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, gpio.o(.text.gp_log_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gp_log_last &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_reset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_reidx
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_idx
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_add
</UL>

<P><STRONG><a name="[256]"></a>gp_log_rec</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gpio.o(.text.gp_log_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gp_log_rec &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24M01_read
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_elog
</UL>

<P><STRONG><a name="[25b]"></a>gp_log_reidx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpio.o(.text.gp_log_reidx))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gp_log_reidx &rArr; gp_log_last &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_last
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_elog
</UL>

<P><STRONG><a name="[2e4]"></a>gp_log_state</STRONG> (Thumb, 72 bytes, Stack size 120 bytes, gpio.o(.text.gp_log_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = gp_log_state &rArr; dateFormatS &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormatS
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_check
</UL>

<P><STRONG><a name="[27b]"></a>gp_max_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text.gp_max_get))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[28b]"></a>gp_max_getF</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text.gp_max_getF))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[278]"></a>gp_max_save</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gpio.o(.text.gp_max_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gp_max_save &rArr; eeprom_write_uint32 &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[275]"></a>gp_max_saveF</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, gpio.o(.text.gp_max_saveF))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gp_max_saveF &rArr; eeprom_write_float &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_float
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[286]"></a>gp_min_getF</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text.gp_min_getF))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[274]"></a>gp_min_saveF</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gpio.o(.text.gp_min_saveF))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gp_min_saveF &rArr; eeprom_write_float &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_float
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[263]"></a>gp_mode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpio.o(.text.gp_mode))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[270]"></a>gp_mode_save</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gpio.o(.text.gp_mode_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = gp_mode_save &rArr; gp_conf_init &rArr; gp_set &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[20a]"></a>gp_port_init</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, gpio.o(.text.gp_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gp_port_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_init
</UL>

<P><STRONG><a name="[2d9]"></a>gp_set</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, gpio.o(.text.gp_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gp_set &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint32
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_set_state
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_value
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_conf_init
</UL>

<P><STRONG><a name="[28c]"></a>gp_set_state</STRONG> (Thumb, 182 bytes, Stack size 120 bytes, gpio.o(.text.gp_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = gp_set_state &rArr; gp_log_add &rArr; gp_log_last &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormatS
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_add
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_value
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_set
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew_adc
</UL>

<P><STRONG><a name="[262]"></a>gp_value</STRONG> (Thumb, 268 bytes, Stack size 104 bytes, gpio.o(.text.gp_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = gp_value &rArr; gp_adc_rvalue &rArr; HAL_ADC_Start_DMA &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_adc_rvalue
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormatS
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormat
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_hello
</UL>

<P><STRONG><a name="[272]"></a>gp_zvalue_read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gpio.o(.text.gp_zvalue_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gp_zvalue_read &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[273]"></a>gp_zvalue_write</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gpio.o(.text.gp_zvalue_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gp_zvalue_write &rArr; eeprom_write_buffer &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[2e1]"></a>gpin_init</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, gpio.o(.text.gpin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gpin_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_init
</UL>

<P><STRONG><a name="[2cb]"></a>kt_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, net.o(.text.kt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = kt_get &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ca]"></a>kt_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net.o(.text.kt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = kt_set &rArr; eeprom_write_byte &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
</UL>

<P><STRONG><a name="[2e7]"></a>lines_num</STRONG> (Thumb, 818 bytes, Stack size 48 bytes, utility.o(.text.lines_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = lines_num &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
</UL>

<P><STRONG><a name="[ec]"></a>main</STRONG> (Thumb, 1612 bytes, Stack size 112 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1252 + Unknown Stack Size
<LI>Call Chain = main &rArr; serial_process &rArr; command_process &rArr; command_arc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_task_check
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_process
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_serial_process
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getVersion
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_logic_read
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_bind_in_read
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_bind_out_read
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_volt_get
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_ports_get
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_error_get
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_mess_get
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;range_max_get
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;range_min_get
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_max_get
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_min_get
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_count_get
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kt_get
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boost_get
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_time_get
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;points_get
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Regulator_init
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_addr_read
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_serial_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_renew
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_process
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_addr
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_reset_check
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_max_read
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dateFormat
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[147]"></a>millis</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utility.o(.text.millis))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at_num
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_clear
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_romcrc
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_float
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint32
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_float
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint32
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_buffer
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rs485_send
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rs485_process
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_serial_process
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_waitResp
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_ready
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_num
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_data_check
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_last
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_setPotLine
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_rms_get
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_chip_erase
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_idx_clear
</UL>

<P><STRONG><a name="[2f9]"></a>modem_at</STRONG> (Thumb, 584 bytes, Stack size 48 bytes, modem.o(.text.modem_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = modem_at &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_reset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChar
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_tcp_write
</UL>

<P><STRONG><a name="[297]"></a>modem_at_num</STRONG> (Thumb, 598 bytes, Stack size 48 bytes, modem.o(.text.modem_at_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = modem_at_num &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_reset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trim
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChar
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_tcp_status
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_modem
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_task_check
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connect_check
</UL>

<P><STRONG><a name="[1d2]"></a>modem_buf_cpy</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, modem.o(.text.modem_buf_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = modem_buf_cpy &rArr; clearString &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_copy
</UL>

<P><STRONG><a name="[2fb]"></a>modem_cmd_process</STRONG> (Thumb, 528 bytes, Stack size 144 bytes, modem.o(.text.modem_cmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = modem_cmd_process &rArr; serial_is_command &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_data_trim
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_command
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_end
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_char
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_str
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_start
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_data_clear
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_addr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lines_num
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringC
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftString
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_src_write
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
</UL>

<P><STRONG><a name="[c3]"></a>modem_connect_check</STRONG> (Thumb, 636 bytes, Stack size 224 bytes, modem.o(.text.modem_connect_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = modem_connect_check &rArr; modem_disconnected &rArr; serial_write_addr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at_num
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_tcp_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_addr
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subString
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftString
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_src_read
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_disconnected
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[1e1]"></a>modem_connected</STRONG> (Thumb, 138 bytes, Stack size 144 bytes, modem.o(.text.modem_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = modem_connected &rArr; serial_write_addr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_addr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_connect
</UL>

<P><STRONG><a name="[1c8]"></a>modem_data_check</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, modem.o(.text.modem_data_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = modem_data_check &rArr; clearString &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_end
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_start
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_send
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_start
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_send
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_start
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_connect
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_cont
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_exist
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms_del
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms_code
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms_scr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_echo
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_at
</UL>

<P><STRONG><a name="[1d8]"></a>modem_data_num</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, modem.o(.text.modem_data_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = modem_data_num &rArr; Trim &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trim
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChar
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_IP
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_csq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_imei
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_creg
</UL>

<P><STRONG><a name="[1c6]"></a>modem_data_ready</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, modem.o(.text.modem_data_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = modem_data_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_end
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_start
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_send
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_start
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_send
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_start
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_tcp_start
</UL>

<P><STRONG><a name="[1d6]"></a>modem_disconnected</STRONG> (Thumb, 136 bytes, Stack size 144 bytes, modem.o(.text.modem_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = modem_disconnected &rArr; serial_write_addr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_addr
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connect_check
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_send
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_connect
</UL>

<P><STRONG><a name="[1c7]"></a>modem_flash</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modem.o(.text.modem_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = modem_flash &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_end
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_start
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_send
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_send
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_start
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_tcp_start
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_srv_set_1
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_IP
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_connect
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_cont
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_exist
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms_del
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms_code
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms_scr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_check
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_csq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_imei
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_creg
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_echo
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_at
</UL>

<P><STRONG><a name="[28f]"></a>modem_param</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, modem.o(.text.modem_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = modem_param &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_hello
</UL>

<P><STRONG><a name="[1dd]"></a>modem_power_off</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modem.o(.text.modem_power_off))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_power
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_power
</UL>

<P><STRONG><a name="[1dc]"></a>modem_power_on</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modem.o(.text.modem_power_on))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_power
</UL>

<P><STRONG><a name="[295]"></a>modem_serial_clean</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, modem.o(.text.modem_serial_clean))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_modem
</UL>

<P><STRONG><a name="[2ed]"></a>modem_serial_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, modem.o(.text.modem_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = modem_serial_init &rArr; fifo_init
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f5]"></a>modem_serial_process</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, modem.o(.text.modem_serial_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = modem_serial_process &rArr; addChar &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_data_len
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_data_add
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_data_clear
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChar
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_src_write
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_src_read
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e3]"></a>modem_sim_detect</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, modem.o(.text.modem_sim_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = modem_sim_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_power
</UL>

<P><STRONG><a name="[1d7]"></a>modem_status</STRONG> (Thumb, 70 bytes, Stack size 80 bytes, modem.o(.text.modem_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = modem_status &rArr; serial_write_addr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_addr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_IP
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_check
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_creg
</UL>

<P><STRONG><a name="[1de]"></a>modem_status_n</STRONG> (Thumb, 98 bytes, Stack size 144 bytes, modem.o(.text.modem_status_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = modem_status_n &rArr; serial_write_addr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_addr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_reset
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_connect
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_gprs
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_power
</UL>

<P><STRONG><a name="[2f6]"></a>modem_task_check</STRONG> (Thumb, 284 bytes, Stack size 88 bytes, modem.o(.text.modem_task_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = modem_task_check &rArr; modem_at_num &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at_num
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start_tp
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_running
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subString
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftString
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[294]"></a>modem_tcp_status</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, modem.o(.text.modem_tcp_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = modem_tcp_status &rArr; modem_at_num &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at_num
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subString
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftString
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_modem
</UL>

<P><STRONG><a name="[307]"></a>modem_tcp_write</STRONG> (Thumb, 302 bytes, Stack size 88 bytes, modem.o(.text.modem_tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = modem_tcp_write &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChar
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_waitResp
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connect_check
</UL>

<P><STRONG><a name="[30a]"></a>modem_waitResp</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, modem.o(.text.modem_waitResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = modem_waitResp &rArr; addChar &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_reset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChar
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_tcp_write
</UL>

<P><STRONG><a name="[296]"></a>modem_write</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, modem.o(.text.modem_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = modem_write &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_modem
</UL>

<P><STRONG><a name="[1d4]"></a>modem_write_b1</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, modem.o(.text.modem_write_b1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = modem_write_b1 &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_send
</UL>

<P><STRONG><a name="[1d5]"></a>modem_write_char</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, modem.o(.text.modem_write_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = modem_write_char &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_send
</UL>

<P><STRONG><a name="[1c5]"></a>modem_write_prepare</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, modem.o(.text.modem_write_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = modem_write_prepare &rArr; clearString &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_end
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_start
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_send
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_start
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_send
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_start
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_tcp_start
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_IP
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_connect
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_cont
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_exist
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms_del
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms_code
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms_scr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_csq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_imei
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_creg
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_echo
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_at
</UL>

<P><STRONG><a name="[1d3]"></a>modem_write_str</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, modem.o(.text.modem_write_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = modem_write_str &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_send
</UL>

<P><STRONG><a name="[1c9]"></a>modem_write_tx</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, modem.o(.text.modem_write_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = modem_write_tx &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_end
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_start
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_send
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_start
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_start
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_tcp_start
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_IP
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_connect
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_cont
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_gprs_exist
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms_del
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms_code
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms_scr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_sms
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_csq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_imei
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_creg
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_echo
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_at
</UL>

<P><STRONG><a name="[29e]"></a>net_info</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, net.o(.text.net_info))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
</UL>

<P><STRONG><a name="[2f2]"></a>net_init</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, net.o(.text.net_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = net_init &rArr; steps_read &rArr; eeprom_read_float &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_float
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint32
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_read
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[248]"></a>net_kt_curr_get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, net.o(.text.net_kt_curr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = net_kt_curr_get &rArr; eeprom_read_float &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_float
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
</UL>

<P><STRONG><a name="[247]"></a>net_kt_curr_set</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, net.o(.text.net_kt_curr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = net_kt_curr_set &rArr; eeprom_write_float &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_float
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
</UL>

<P><STRONG><a name="[246]"></a>net_kt_volt_get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, net.o(.text.net_kt_volt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = net_kt_volt_get &rArr; eeprom_read_float &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_float
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
</UL>

<P><STRONG><a name="[245]"></a>net_kt_volt_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net.o(.text.net_kt_volt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = net_kt_volt_set &rArr; eeprom_write_float &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_float
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
</UL>

<P><STRONG><a name="[312]"></a>net_reset_counter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net.o(.text.net_reset_counter))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_archiver
</UL>

<P><STRONG><a name="[17b]"></a>now</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, utility.o(.text.now))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_cnt_set
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_stop_tp
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_timer
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_time
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_hello
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_repair_on
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_err_set
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Regulator_dt_reg
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Regulator_dt_net_reset
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Regulator_dt_net
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start_tp
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_tcp_write
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_task_check
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_process
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Regulator_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_archiver
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connect_check
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_start
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_renew
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_process
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_tick_sec
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_start
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_get
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_finish
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_begin
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_send
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_write_prepare
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connected
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_goto
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start_sub_tp
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_stop
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_dt2_save
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_check
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew_adc
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_add
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_set
</UL>

<P><STRONG><a name="[23f]"></a>paramString</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utility.o(.text.paramString))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_debug
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_step
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_run
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phase
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_scan
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_in
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cont
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_port
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_blink
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_bind
</UL>

<P><STRONG><a name="[261]"></a>paramStringC</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, utility.o(.text.paramStringC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = paramStringC &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
</UL>

<P><STRONG><a name="[239]"></a>paramStringMax</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, utility.o(.text.paramStringMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = paramStringMax &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_contlog
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_sms
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gprs
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phone
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_modem
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_wdt
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_timer
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_ns
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_addr
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_server
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_flash
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_romcrc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rom
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_elog
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_time
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_task
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
</UL>

<P><STRONG><a name="[30c]"></a>paramStringNum</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, utility.o(.text.paramStringNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = paramStringNum &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rs485_prepare
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rs485_send
</UL>

<P><STRONG><a name="[152]"></a>phase_save_state</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, tasklist.o(.text.phase_save_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_buffer
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_buffer
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_get_parent
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_rep_end
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_rep_end
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_rep_end
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_delay_5sec
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_on
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_on
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_check
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_off
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_off
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_delay_5sec
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_on
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_on
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_check
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_off
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_off
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_off
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_delay_5sec
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_on
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_on
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOff
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_on
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_check
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_finish
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_off
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_off
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOn
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_begin
</UL>

<P><STRONG><a name="[1cb]"></a>phone_num</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utility.o(.text.phone_num))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phone
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_start
</UL>

<P><STRONG><a name="[2c9]"></a>points_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, net.o(.text.points_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = points_get &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c8]"></a>points_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net.o(.text.points_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = points_set &rArr; eeprom_write_byte &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
</UL>

<P><STRONG><a name="[2c5]"></a>range_max_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net.o(.text.range_max_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = range_max_get &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c4]"></a>range_min_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net.o(.text.range_min_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = range_min_get &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c3]"></a>range_minmax_set</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, net.o(.text.range_minmax_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = range_minmax_set &rArr; eeprom_write_uint16 &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
</UL>

<P><STRONG><a name="[2f0]"></a>serial_addr_read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, serial.o(.text.serial_addr_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = serial_addr_read &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[309]"></a>serial_data_add</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, serial.o(.text.serial_data_add))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_serial_process
</UL>

<P><STRONG><a name="[303]"></a>serial_data_clear</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, serial.o(.text.serial_data_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_serial_process
</UL>

<P><STRONG><a name="[2bc]"></a>serial_data_len</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial.o(.text.serial_data_len))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rs
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_serial_process
</UL>

<P><STRONG><a name="[2bb]"></a>serial_data_trim</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, serial.o(.text.serial_data_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = serial_data_trim &rArr; Trim &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trim
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rs
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
</UL>

<P><STRONG><a name="[2ec]"></a>serial_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, serial.o(.text.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = serial_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fc]"></a>serial_is_command</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, serial.o(.text.serial_is_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = serial_is_command &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subString
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trim
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftData
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
</UL>

<P><STRONG><a name="[2f4]"></a>serial_process</STRONG> (Thumb, 524 bytes, Stack size 32 bytes, serial.o(.text.serial_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140 + Unknown Stack Size
<LI>Call Chain = serial_process &rArr; command_process &rArr; command_arc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start_tp
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_running
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_tcp_write
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_process
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_command
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rs485_process
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_addr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_src_write
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_src_read
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2bd]"></a>serial_rs485_prepare</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, serial.o(.text.serial_rs485_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = serial_rs485_prepare &rArr; serial_rs485_send &rArr; paramStringNum &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rs485_send
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringNum
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rs
</UL>

<P><STRONG><a name="[30f]"></a>serial_rs485_process</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, serial.o(.text.serial_rs485_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = serial_rs485_process &rArr; serial_rs485_send &rArr; paramStringNum &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rs485_send
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_src_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
</UL>

<P><STRONG><a name="[310]"></a>serial_rs485_send</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, serial.o(.text.serial_rs485_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = serial_rs485_send &rArr; paramStringNum &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramStringNum
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toHex
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rs485_prepare
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rs485_process
</UL>

<P><STRONG><a name="[154]"></a>serial_write</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, serial.o(.text.serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = serial_write &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_blink
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_volt
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_process
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_start
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_off
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contactor_on
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_rep_end
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_rep_end
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_rep_end
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_repair_begin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_save
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_delay_5sec
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_on
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_on
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM9_off
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_KM_off
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_delay_5sec
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_on
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_on
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM9_off
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_KM_off
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_force_trans
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_off
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_delay_5sec
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KM_Trans_on
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_on
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOff
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_on
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_finish
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM9_off
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KM_off
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_TransOn
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_begin
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_end
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_call_start
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_send
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_srv_send
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_tcp_start
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_start_power
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_try
</UL>

<P><STRONG><a name="[2f1]"></a>serial_write_addr</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, serial.o(.text.serial_write_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = serial_write_addr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connect_check
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_reset_check
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_status
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_disconnected
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connected
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_status_n
</UL>

<P><STRONG><a name="[301]"></a>serial_write_char</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, serial.o(.text.serial_write_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = serial_write_char &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
</UL>

<P><STRONG><a name="[302]"></a>serial_write_end</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, serial.o(.text.serial_write_end))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
</UL>

<P><STRONG><a name="[2ff]"></a>serial_write_start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, serial.o(.text.serial_write_start))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
</UL>

<P><STRONG><a name="[300]"></a>serial_write_str</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, serial.o(.text.serial_write_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = serial_write_str &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
</UL>

<P><STRONG><a name="[2ba]"></a>shiftData</STRONG> (Thumb, 140 bytes, Stack size 28 bytes, utility.o(.text.shiftData))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = shiftData
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rom
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_command
</UL>

<P><STRONG><a name="[1d1]"></a>shiftString</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, utility.o(.text.shiftString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shiftString &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_tcp_status
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rs
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_cmd_process
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_task_check
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connect_check
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sms_start
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_sub_csq
</UL>

<P><STRONG><a name="[2be]"></a>steps_count_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, net.o(.text.steps_count_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = steps_count_get &rArr; eeprom_read_byte &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_step
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_run
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2bf]"></a>steps_count_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net.o(.text.steps_count_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = steps_count_set &rArr; eeprom_write_byte &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
</UL>

<P><STRONG><a name="[1f1]"></a>steps_get</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, net.o(.text.steps_get))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_step
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_volt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_save
</UL>

<P><STRONG><a name="[30b]"></a>steps_read</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, net.o(.text.steps_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = steps_read &rArr; eeprom_read_float &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_float
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[2cc]"></a>steps_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, net.o(.text.steps_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = steps_set &rArr; eeprom_write_float &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_float
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_step
</UL>

<P><STRONG><a name="[306]"></a>subString</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, utility.o(.text.subString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = subString &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_tcp_status
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_command
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_task_check
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_connect_check
</UL>

<P><STRONG><a name="[c7]"></a>sys_led_blink</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text.sys_led_blink))
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[2d3]"></a>sys_wdt_cnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.sys_wdt_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_wdt
</UL>

<P><STRONG><a name="[2d2]"></a>sys_wdt_max</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.sys_wdt_max))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_wdt
</UL>

<P><STRONG><a name="[c4]"></a>sys_wdt_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.sys_wdt_reset))
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at_num
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_clear
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_blink
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_wdt
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_romcrc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rom
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_mem
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_millis
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_waitResp
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_at
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_log_last
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_chip_erase
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_idx_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[311]"></a>sys_wdt_upd</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text.sys_wdt_upd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sys_wdt_upd &rArr; wdt_max_read &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_max_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_max_write
</UL>

<P><STRONG><a name="[15c]"></a>task_TransOff</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, tasklist.o(.text.task_TransOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = task_TransOff &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start_sub_tp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_TransOff
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_TransOff
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_TransOff
</UL>

<P><STRONG><a name="[15d]"></a>task_TransOn</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, tasklist.o(.text.task_TransOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = task_TransOn &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start_sub_tp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_TransOn
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_TransOn
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_TransOn
</UL>

<P><STRONG><a name="[ca]"></a>task_archiver</STRONG> (Thumb, 468 bytes, Stack size 112 bytes, phase.o(.text.task_archiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = task_archiver &rArr; arc_save &rArr; W25Q64_write_data &rArr; W25Q64_sector_erase &rArr; W25Q64_write24 &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_reset_counter
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_save
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_avg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curr_avg
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_min
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_max
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_avg
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_JEDEC
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_status
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_timestamp_to_date
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[c9]"></a>task_auto_start</STRONG> (Thumb, 950 bytes, Stack size 40 bytes, phase.o(.text.task_auto_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = task_auto_start &rArr; task_auto_volt &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_avg_reg
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_last
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_get
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_volt
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[313]"></a>task_auto_volt</STRONG> (Thumb, 736 bytes, Stack size 64 bytes, phase.o(.text.task_auto_volt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = task_auto_volt &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_get
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start_tp
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_start
</UL>

<P><STRONG><a name="[14e]"></a>task_force_trans</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, tasklist.o(.text.task_force_trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = task_force_trans &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_set
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_clr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FTrans
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_FTrans
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FTrans
</UL>

<P><STRONG><a name="[c8]"></a>task_net_start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, phase.o(.text.task_net_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = task_net_start &rArr; Task_start_tp
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start_tp
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_is_running
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_by_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[161]"></a>task_repair_begin</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, tasklist.o(.text.task_repair_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = task_repair_begin &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_busy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_set
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_repair_on
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_clr
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_in_clr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_P1
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_P2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_mode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_phase_in
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_renew
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_ns_port
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_iter_manual
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_rep_start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_rep_start
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_rep_start
</UL>

<P><STRONG><a name="[15e]"></a>task_step_begin</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tasklist.o(.text.task_step_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = task_step_begin &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_last
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_err_clr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_stat_num
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_stat_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Regulator_dt_reg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_begin
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_begin
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_begin
</UL>

<P><STRONG><a name="[15f]"></a>task_step_finish</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, tasklist.o(.text.task_step_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = task_step_finish &rArr; phase_save_state &rArr; eeprom_read_buffer &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_busy
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;volt_last
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_err_set
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ports_scan_mode
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_ns_on
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_stat_num
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_save_state
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_finish
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_finish
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_finish
</UL>

<P><STRONG><a name="[214]"></a>timeFormat</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, utility.o(.text.timeFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = timeFormat &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_timestamp_to_date
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_stat_one
</UL>

<P><STRONG><a name="[2a4]"></a>toHex</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utility.o(.text.toHex))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phone
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rom
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rs485_send
</UL>

<P><STRONG><a name="[23c]"></a>uint32_to_hex</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, utility.o(.text.uint32_to_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = uint32_to_hex &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_arc
</UL>

<P><STRONG><a name="[29b]"></a>volt_avg</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, net.o(.text.volt_avg))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_archiver
</UL>

<P><STRONG><a name="[1ea]"></a>volt_avg_reg</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, net.o(.text.volt_avg_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = volt_avg_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_num
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_save
</UL>

<P><STRONG><a name="[1f0]"></a>volt_last</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, net.o(.text.volt_last))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_phase
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_save
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_finish
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_step_begin
</UL>

<P><STRONG><a name="[29f]"></a>volt_max</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, net.o(.text.volt_max))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_archiver
</UL>

<P><STRONG><a name="[2c2]"></a>volt_max_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net.o(.text.volt_max_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = volt_max_get &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a0]"></a>volt_min</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, net.o(.text.volt_min))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_archiver
</UL>

<P><STRONG><a name="[2c1]"></a>volt_min_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net.o(.text.volt_min_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = volt_min_get &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c0]"></a>volt_minmax_set</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, net.o(.text.volt_minmax_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = volt_minmax_set &rArr; eeprom_write_uint16 &rArr; M24M01_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_set
</UL>

<P><STRONG><a name="[2f3]"></a>wdt_max_read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utility.o(.text.wdt_max_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wdt_max_read &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_upd
</UL>

<P><STRONG><a name="[2d4]"></a>wdt_max_write</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, utility.o(.text.wdt_max_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wdt_max_write &rArr; sys_wdt_upd &rArr; wdt_max_read &rArr; eeprom_read_uint16 &rArr; M24M01_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wdt_upd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_wdt
</UL>

<P><STRONG><a name="[2f7]"></a>wdt_reset_check</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, utility.o(.text.wdt_reset_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = wdt_reset_check &rArr; serial_write_addr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write_addr
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[318]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[317]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[31b]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[319]"></a>_e2d</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[31a]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[110]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[123]"></a>_btod_edivd</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[111]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[122]"></a>_btod_emuld</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[31c]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[114]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[31d]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[31f]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[127]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[320]"></a>__mathlib_tofloat</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[12b]"></a>__support_ldexp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[ff]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[244]"></a>atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_step
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
</UL>

<P><STRONG><a name="[321]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[324]"></a>ldexp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[232]"></a>roundf</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, roundf.o(i.roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = roundf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffers_save
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffers_save_one
</UL>

<P><STRONG><a name="[b8]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_step
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getFreq
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[327]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[32a]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[32f]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[24a]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
</UL>

<P><STRONG><a name="[32c]"></a>_ddiv</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[322]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[32e]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[249]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
</UL>

<P><STRONG><a name="[383]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[139]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getFreq
</UL>

<P><STRONG><a name="[384]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[385]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[330]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[333]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_getFreq
</UL>

<P><STRONG><a name="[331]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[329]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[32d]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[323]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[332]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[1ec]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_value
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_step
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_save
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_adc
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew_adc
</UL>

<P><STRONG><a name="[334]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[236]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffers_save_one
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
</UL>

<P><STRONG><a name="[336]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[2e5]"></a>__aeabi_fcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_kt_save
</UL>

<P><STRONG><a name="[338]"></a>_feq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[33a]"></a>_fneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[2db]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_adc
</UL>

<P><STRONG><a name="[33b]"></a>_fgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[234]"></a>__aeabi_fcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_adc
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffers_save_one
</UL>

<P><STRONG><a name="[33d]"></a>_fgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[235]"></a>__aeabi_fcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_adc
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffers_save_one
</UL>

<P><STRONG><a name="[33e]"></a>_fleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[2da]"></a>__aeabi_fcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_adc
</UL>

<P><STRONG><a name="[340]"></a>_fls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[342]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_value
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_avg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curr_avg
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_volt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_start
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_setCos
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffers_save
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_save
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_adc
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew_adc
</UL>

<P><STRONG><a name="[341]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[386]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)

<P><STRONG><a name="[339]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fneq
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_feq
</UL>

<P><STRONG><a name="[1f2]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_volt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_start
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffers_save
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_save
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffers_save_one
</UL>

<P><STRONG><a name="[343]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_value
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_gp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7758_setCos
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_input_adc
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_bind_renew_adc
</UL>

<P><STRONG><a name="[387]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[1ee]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_cal
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_avg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curr_avg
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_volt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_archiver
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_start
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffers_save
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_save
</UL>

<P><STRONG><a name="[388]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[33c]"></a>_fcmpge</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fgeqf.o(x$fpl$fgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgeq
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgr
</UL>

<P><STRONG><a name="[389]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[33f]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fls
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fleq
</UL>

<P><STRONG><a name="[38a]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[1ef]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_net
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_auto_volt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_archiver
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_save
</UL>

<P><STRONG><a name="[344]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[335]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[328]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[325]"></a>_frnd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, frnd.o(x$fpl$frnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
</UL>

<P><STRONG><a name="[326]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
</UL>

<P><STRONG><a name="[345]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[121]"></a>__ieee_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[d3]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[32b]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[31e]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[11b]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[126]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[125]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[347]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[316]"></a>__NVIC_SystemReset</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, utility.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_reset_check
</UL>

<P><STRONG><a name="[2f8]"></a>__NVIC_SystemReset</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bc]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(.text.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[18d]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(.text.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[18c]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 626 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(.text.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_RequestMemoryWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[18a]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 798 bytes, Stack size 40 bytes, stm32f1xx_hal_i2c.o(.text.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[1bd]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(.text.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[1ae]"></a>UART_Receive_IT</STRONG> (Thumb, 182 bytes, Stack size 4 bytes, stm32f1xx_hal_uart.o(.text.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[19e]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, stm32f1xx_hal_spi.o(.text.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[346]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[337]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[10d]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[bc]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[11a]"></a>_local_sscanf</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[120]"></a>_fp_value</STRONG> (Thumb, 588 bytes, Stack size 96 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
